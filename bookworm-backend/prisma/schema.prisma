generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  id               Int                    @id @default(autoincrement())
  user_id          Int
  status           OrderStatus            @default(PENDING_PAYMENT)
  total_amount     Int                     @db.Integer
  pickup_code      String                 @unique @db.VarChar(16)
  createdAt        DateTime               @default(now()) @db.Timestamptz(6)
  paymentExpiresAt DateTime               @db.Timestamptz(6)
  pickupExpiresAt  DateTime?              @db.Timestamptz(6)
  paid_at          DateTime?              @db.Timestamptz(6)
  completed_at     DateTime?              @db.Timestamptz(6)
  cancelled_at     DateTime?              @db.Timestamptz(6)
  type             OrderType              @default(PURCHASE)
  totalWeightKg    Float?                 @map("total_weight_kg")
  unitPrice        Int?                   @map("unit_price")
  settlementType   SettlementType?        @map("settlement_type")
  voucherFaceValue Int?                   @map("voucher_face_value")
  notes            String?
  User             User                   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")
  orderItem        OrderItem[]
  PaymentRecord    PaymentRecord[]
  reservations     InventoryReservation[]
  pendingGuard     PendingPaymentOrder?
  sourcedInventory InventoryItem[]        @relation("SourceOrder")

  @@index([user_id, status], map: "idx_order_user_id_status")
  @@index([createdAt], map: "idx_order_created_at")
  @@index([user_id, createdAt, id], map: "idx_order_user_created_at_id")
}

model PendingPaymentOrder {
  order_id   Int      @id
  user_id    Int
  created_at DateTime @default(now()) @db.Timestamptz(6)

  Order Order @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pending_order")
  User  User  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pending_user")

  @@unique([user_id], map: "uniq_order_pending_per_user")
  @@map("pending_payment_order")
}

model User {
  id                   Int                   @id @default(autoincrement())
  openid               String                @unique @db.VarChar(255)
  unionid              String?               @unique @db.VarChar(255)
  nickname             String?               @db.VarChar(255)
  avatar_url           String?               @db.VarChar(255)
  role                 Role                  @default(USER)
  phone_number         String?               @unique @db.VarChar(20)
  status               UserStatus            @default(REGISTERED)
  created_at           DateTime              @default(now()) @db.Timestamptz(6)
  Order                Order[]
  pendingOrders        PendingPaymentOrder[]
  StaffAcquisitions    Acquisition[]         @relation("StaffAcquisitions")
  CustomerAcquisitions Acquisition[]         @relation("CustomerAcquisitions")
  profile              UserProfile?

  @@index([phone_number])
}

model BookMaster {
  id             Int       @id @default(autoincrement())
  isbn13         String    @unique @db.VarChar(13)
  title          String    @db.VarChar(255)
  author         String?   @db.VarChar(255)
  publisher      String?   @db.VarChar(255)
  original_price Decimal?  @db.Decimal(10, 2)
  created_at     DateTime  @default(now()) @db.Timestamptz(6)
  updated_at     DateTime  @updatedAt @db.Timestamptz(6)
  bookSku        BookSku[]

  @@index([isbn13], map: "idx_book_master_isbn13")
  @@index([author(ops: raw("gin_trgm_ops"))], map: "idx_bookmaster_author_gin_trgm", type: Gin)
  @@index([title(ops: raw("gin_trgm_ops"))], map: "idx_bookmaster_title_gin_trgm", type: Gin)
  @@map("bookmaster")
}

model BookSku {
  id                     Int                   @id @default(autoincrement())
  master_id              Int
  edition                String?               @db.VarChar(50)
  description            String?
  cover_image_url        String?               @db.VarChar(255)
  created_at             DateTime              @default(now()) @db.Timestamptz(6)
  updated_at             DateTime              @updatedAt @db.Timestamptz(6)
  is_acquirable          Boolean               @default(false)
  bookMaster             BookMaster            @relation(fields: [master_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_master")
  inventoryItems         InventoryItem[]
  recommendedBookItems   RecommendedBookItem[]

  @@unique([master_id, edition])
  @@index([is_acquirable], map: "booksku_is_acquirable_idx")
  @@map("booksku")
}

model InventoryItem {
  id            Int                   @id @default(autoincrement())
  sku_id        Int
  condition     book_condition
  cost          Decimal               @db.Decimal(10, 2)
  selling_price Decimal               @db.Decimal(10, 2)
  status        inventory_status      @default(in_stock)
  created_at    DateTime              @default(now()) @db.Timestamptz(6)
  updated_at    DateTime              @updatedAt @db.Timestamptz(6)
  sourceOrderId Int?                  @map("source_order_id")
  acquisitionId Int?                  @map("acquisition_id")
  bookSku       BookSku               @relation(fields: [sku_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sku")
  orderItem     OrderItem[]
  reservation   InventoryReservation?
  SourceOrder   Order?                @relation("SourceOrder", fields: [sourceOrderId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  Acquisition   Acquisition?          @relation(fields: [acquisitionId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@index([sku_id, status], map: "idx_inventory_item_sku_id_status")
  @@index([sourceOrderId])
  @@index([acquisitionId], map: "inventoryitem_acquisition_id_idx")
  @@map("inventoryitem")
}

model InventoryReservation {
  inventory_item_id Int      @id
  order_id          Int
  created_at        DateTime @default(now()) @db.Timestamptz(6)

  inventoryItem InventoryItem @relation(fields: [inventory_item_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_reservation_item")
  order         Order         @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_reservation_order")

  @@index([order_id], map: "idx_inventory_reservation_order_id")
  @@map("inventory_reservation")
}

model OrderItem {
  id                Int           @id @default(autoincrement())
  order_id          Int
  inventory_item_id Int
  price             Decimal       @db.Decimal(10, 2)
  inventoryItem     InventoryItem @relation(fields: [inventory_item_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_inventory_item")
  Order             Order         @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order")

  @@unique([order_id, inventory_item_id], map: "uniq_orderitem_order_inventory")
  @@index([inventory_item_id], map: "idx_orderitem_inventory_item_id")
  @@map("orderitem")
}

model Content {
  id        Int      @id @default(autoincrement())
  slug      String   @unique @db.VarChar(255)
  title     String   @db.VarChar(255)
  body      String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([slug], map: "idx_content_slug")
}

model PaymentRecord {
  id              Int           @id @default(autoincrement())
  order_id        Int
  out_trade_no    String        @unique @db.VarChar(100)
  transaction_id  String?       @unique @db.VarChar(100)
  status          PaymentStatus @default(PENDING)
  amount_total    Int
  payer_openid    String?       @db.VarChar(255)
  appid           String?       @db.VarChar(100)
  mchid           String?       @db.VarChar(100)
  createdAt       DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime      @updatedAt @db.Timestamptz(6)
  notified_at     DateTime?       @db.Timestamptz(6)
  refunded_at     DateTime?       @db.Timestamptz(6)
  refund_id       String?       @unique @db.VarChar(100)
  refund_attempts Int           @default(0)
  Order           Order         @relation(fields: [order_id], references: [id])

  @@index([order_id])
  @@index([status, createdAt])
}

model Acquisition {
  id               Int             @id @default(autoincrement())
  staff_user_id    Int
  customer_user_id Int?
  total_value      Int
  item_count       Int
  settlement_type  SettlementType
  voucher_code     String?         @db.VarChar(255)
  notes            String?
  created_at       DateTime        @default(now()) @db.Timestamptz(6)
  StaffUser        User            @relation("StaffAcquisitions", fields: [staff_user_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  CustomerUser     User?           @relation("CustomerAcquisitions", fields: [customer_user_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  items            InventoryItem[]

  @@index([staff_user_id], map: "Acquisition_staff_user_id_idx")
  @@index([created_at], map: "Acquisition_created_at_idx")
}

enum book_condition {
  NEW
  GOOD
  ACCEPTABLE
}

enum inventory_status {
  in_stock
  reserved
  sold
  returned
  damaged
  BULK_ACQUISITION
}

enum OrderType {
  PURCHASE
  SELL
}

enum SettlementType {
  CASH
  VOUCHER
}

enum Role {
  USER
  STAFF
}

enum UserStatus {
  REGISTERED
  PRE_REGISTERED
}

enum OrderStatus {
  PENDING_PAYMENT
  PENDING_PICKUP
  COMPLETED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  REFUND_REQUIRED
  REFUNDED
  FAILED
  REFUND_PROCESSING
}

model UserProfile {
  user_id         Int      @id
  phone_number    String?  @db.VarChar(20)
  enrollment_year Int?
  major           String?  @db.VarChar(100)
  class_name      String?  @db.VarChar(50)
  updated_at      DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model RecommendedBookList {
  id              Int                   @id @default(autoincrement())
  enrollment_year Int
  major           String                @db.VarChar(100)
  items           RecommendedBookItem[]

  @@unique([enrollment_year, major])
  @@index([enrollment_year])
}

model RecommendedBookItem {
  list_id Int
  sku_id  Int

  list    RecommendedBookList @relation(fields: [list_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookSku BookSku             @relation(fields: [sku_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@id([list_id, sku_id])
  @@index([sku_id])
}
