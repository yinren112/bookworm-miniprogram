generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  id               Int                    @id @default(autoincrement())
  user_id          Int
  status           OrderStatus            @default(PENDING_PAYMENT)
  total_amount     Decimal                @db.Decimal(10, 2)
  pickup_code      String                 @unique @db.VarChar(16)
  createdAt        DateTime               @default(now()) @db.Timestamptz(6)
  paymentExpiresAt DateTime               @db.Timestamptz(6)
  pickupExpiresAt  DateTime?              @db.Timestamptz(6)
  paid_at          DateTime?              @db.Timestamptz(6)
  completed_at     DateTime?              @db.Timestamptz(6)
  cancelled_at     DateTime?              @db.Timestamptz(6)
  User             User                   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")
  orderItem        OrderItem[]
  PaymentRecord    PaymentRecord[]
  reservations     InventoryReservation[]
  pendingGuard     PendingPaymentOrder?

  @@index([user_id, status], map: "idx_order_user_id_status")
  @@index([createdAt], map: "idx_order_created_at")
  @@index([user_id, createdAt, id], map: "idx_order_user_created_at_id")
}

model PendingPaymentOrder {
  order_id   Int      @id
  user_id    Int
  created_at DateTime @default(now()) @db.Timestamptz(6)

  Order Order @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pending_order")
  User  User  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_pending_user")

  @@unique([user_id], map: "uniq_order_pending_per_user")
  @@map("pending_payment_order")
}

model User {
  id            Int                   @id @default(autoincrement())
  openid        String                @unique @db.VarChar(255)
  unionid       String?               @unique @db.VarChar(255)
  nickname      String?               @db.VarChar(255)
  avatar_url    String?               @db.VarChar(255)
  role          Role                  @default(USER)
  created_at    DateTime              @default(now()) @db.Timestamptz(6)
  Order         Order[]
  pendingOrders PendingPaymentOrder[]
}

model BookMaster {
  id             Int       @id @default(autoincrement())
  isbn13         String    @unique @db.VarChar(13)
  title          String    @db.VarChar(255)
  author         String?   @db.VarChar(255)
  publisher      String?   @db.VarChar(255)
  original_price Decimal?  @db.Decimal(10, 2)
  created_at     DateTime  @default(now()) @db.Timestamptz(6)
  updated_at     DateTime  @updatedAt @db.Timestamptz(6)
  bookSku        BookSku[]

  @@index([isbn13], map: "idx_book_master_isbn13")
  @@index([author(ops: raw("gin_trgm_ops"))], map: "idx_bookmaster_author_gin_trgm", type: Gin)
  @@index([title(ops: raw("gin_trgm_ops"))], map: "idx_bookmaster_title_gin_trgm", type: Gin)
  @@map("bookmaster")
}

model BookSku {
  id              Int             @id @default(autoincrement())
  master_id       Int
  edition         String?         @db.VarChar(50)
  description     String?
  cover_image_url String?         @db.VarChar(255)
  created_at      DateTime        @default(now()) @db.Timestamptz(6)
  updated_at      DateTime        @updatedAt @db.Timestamptz(6)
  bookMaster      BookMaster      @relation(fields: [master_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_master")
  inventoryItems  InventoryItem[]

  @@unique([master_id, edition])
  @@map("booksku")
}

model InventoryItem {
  id            Int                   @id @default(autoincrement())
  sku_id        Int
  condition     book_condition
  cost          Decimal               @db.Decimal(10, 2)
  selling_price Decimal               @db.Decimal(10, 2)
  status        inventory_status      @default(in_stock)
  created_at    DateTime              @default(now()) @db.Timestamptz(6)
  updated_at    DateTime              @updatedAt @db.Timestamptz(6)
  bookSku       BookSku               @relation(fields: [sku_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sku")
  orderItem     OrderItem[]
  reservation   InventoryReservation?

  @@index([sku_id, status], map: "idx_inventory_item_sku_id_status")
  @@map("inventoryitem")
}

model InventoryReservation {
  inventory_item_id Int      @id
  order_id          Int
  created_at        DateTime @default(now()) @db.Timestamptz(6)

  inventoryItem InventoryItem @relation(fields: [inventory_item_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_reservation_item")
  order         Order         @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_reservation_order")

  @@index([order_id], map: "idx_inventory_reservation_order_id")
  @@map("inventory_reservation")
}

model OrderItem {
  id                Int           @id @default(autoincrement())
  order_id          Int
  inventory_item_id Int
  price             Decimal       @db.Decimal(10, 2)
  inventoryItem     InventoryItem @relation(fields: [inventory_item_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_inventory_item")
  Order             Order         @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order")

  @@unique([order_id, inventory_item_id], map: "uniq_orderitem_order_inventory")
  @@index([inventory_item_id], map: "idx_orderitem_inventory_item_id")
  @@map("orderitem")
}

model Content {
  id        Int      @id @default(autoincrement())
  slug      String   @unique @db.VarChar(255)
  title     String   @db.VarChar(255)
  body      String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([slug], map: "idx_content_slug")
}

model PaymentRecord {
  id              Int           @id @default(autoincrement())
  order_id        Int
  out_trade_no    String        @unique @db.VarChar(100)
  transaction_id  String?       @unique @db.VarChar(100)
  status          PaymentStatus @default(PENDING)
  amount_total    Int
  payer_openid    String?       @db.VarChar(255)
  appid           String?       @db.VarChar(100)
  mchid           String?       @db.VarChar(100)
  createdAt       DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime      @updatedAt @db.Timestamptz(6)
  notified_at     DateTime?
  refunded_at     DateTime?
  refund_id       String?       @unique @db.VarChar(100)
  refund_attempts Int           @default(0)
  Order           Order         @relation(fields: [order_id], references: [id])

  @@index([order_id])
  @@index([status, createdAt])
}

enum book_condition {
  NEW
  GOOD
  ACCEPTABLE
}

enum inventory_status {
  in_stock
  reserved
  sold
  returned
  damaged
}

enum Role {
  USER
  STAFF
}

enum OrderStatus {
  PENDING_PAYMENT
  PENDING_PICKUP
  COMPLETED
  CANCELLED
  RETURNED
}

enum PaymentStatus {
  PENDING
  SUCCESS
  REFUND_REQUIRED
  REFUNDED
  FAILED
  REFUND_PROCESSING
}
