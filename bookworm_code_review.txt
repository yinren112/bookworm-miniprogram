================================================================================
BOOKWORM PROJECT - ESSENTIAL CODE REVIEW (UNREDACTED)
================================================================================
Generated on: 2025-09-12 14:49:31
Mode: Essential files only - Core business logic with original data.
Total files included: 23 (精简版)

### 📁 PROJECT FILE TREE ###
----------------------------------------
miniprogram-13/
├── CUserswapadilWeChatProjectsminiprogram-13miniprogrampageswebview/
├── bookworm-backend/
│   ├── prisma/
│   │   ├── migrations/
│   │   │   └── 20250911201929_fix_book_condition_enum_values/
│   │   │       └── migration.sql
│   │   ├── schema.prisma
│   │   └── seed.ts
│   ├── public/
│   │   ├── index.html
│   │   ├── main.js
│   │   ├── style.css
│   │   └── zxing.min.js
│   ├── src/
│   │   ├── jobs/
│   │   │   └── cancelExpiredOrders.ts
│   │   ├── plugins/
│   │   │   ├── auth.ts
│   │   │   └── metrics.ts
│   │   ├── services/
│   │   │   ├── authService.ts
│   │   │   ├── bookMetadataService.ts
│   │   │   ├── contentService.ts
│   │   │   ├── inventoryService.ts
│   │   │   └── orderService.ts
│   │   ├── tests/
│   │   │   ├── authService.test.ts
│   │   │   ├── integration-setup.ts
│   │   │   ├── inventoryService.integration.test.ts
│   │   │   ├── orderService.test.ts
│   │   │   ├── paymentService.test.ts
│   │   │   └── setup.ts
│   │   ├── types/
│   │   ├── config.ts
│   │   ├── db.ts
│   │   ├── errors.ts
│   │   └── index.ts
│   ├── .env
│   ├── .gitignore
│   ├── Dockerfile
│   ├── package.json
│   ├── tsconfig.json
│   ├── vitest.config.ts
│   └── vitest.integration.config.ts
├── miniprogram/
│   ├── components/
│   │   └── skeleton/
│   │       ├── skeleton.js
│   │       ├── skeleton.json
│   │       ├── skeleton.wxml
│   │       └── skeleton.wxss
│   ├── images/
│   │   ├── icons/
│   │   │   ├── arrow-right.png
│   │   │   ├── arrow-right.svg
│   │   │   ├── avatar.png
│   │   │   ├── business-active.png
│   │   │   ├── business.png
│   │   │   ├── close.png
│   │   │   ├── copy.png
│   │   │   ├── customer-service.svg
│   │   │   ├── examples-active.png
│   │   │   ├── examples.png
│   │   │   ├── goods-active.png
│   │   │   ├── goods.png
│   │   │   ├── home-active.png
│   │   │   ├── home.png
│   │   │   ├── question.svg
│   │   │   ├── search.svg
│   │   │   ├── setting.svg
│   │   │   ├── share.svg
│   │   │   ├── usercenter-active.png
│   │   │   └── usercenter.png
│   │   ├── tabs/
│   │   │   ├── marketplace-active.png
│   │   │   ├── marketplace-active.svg
│   │   │   ├── marketplace.png
│   │   │   ├── marketplace.svg
│   │   │   ├── orders-active.png
│   │   │   ├── orders-active.svg
│   │   │   ├── orders.png
│   │   │   ├── orders.svg
│   │   │   ├── profile-active.png
│   │   │   ├── profile-active.svg
│   │   │   ├── profile.png
│   │   │   └── profile.svg
│   │   ├── arrow.svg
│   │   ├── avatar.png
│   │   ├── copy.svg
│   │   ├── default-goods-image.png
│   │   └── placeholder-cover.svg
│   ├── pages/
│   │   ├── book-detail/
│   │   │   ├── index.js
│   │   │   ├── index.json
│   │   │   ├── index.wxml
│   │   │   └── index.wxss
│   │   ├── customer-service/
│   │   │   ├── index.js
│   │   │   ├── index.json
│   │   │   ├── index.wxml
│   │   │   └── index.wxss
│   │   ├── market/
│   │   │   ├── index.js
│   │   │   ├── index.json
│   │   │   ├── index.wxml
│   │   │   └── index.wxss
│   │   ├── order-confirm/
│   │   │   ├── index.js
│   │   │   ├── index.json
│   │   │   ├── index.wxml
│   │   │   └── index.wxss
│   │   ├── order-detail/
│   │   │   ├── index.js
│   │   │   ├── index.json
│   │   │   ├── index.wxml
│   │   │   └── index.wxss
│   │   ├── orders/
│   │   │   ├── index.js
│   │   │   ├── index.json
│   │   │   ├── index.wxml
│   │   │   └── index.wxss
│   │   ├── profile/
│   │   │   ├── index.js
│   │   │   ├── index.json
│   │   │   ├── index.wxml
│   │   │   └── index.wxss
│   │   └── webview/
│   │       ├── index.js
│   │       ├── index.json
│   │       ├── index.wxml
│   │       └── index.wxss
│   ├── templates/
│   │   ├── search-bar.wxml
│   │   └── search-bar.wxss
│   ├── utils/
│   │   ├── api.js
│   │   ├── auth.js
│   │   ├── constants.js
│   │   ├── formatter.wxs
│   │   └── token.js
│   ├── app.js
│   ├── app.json
│   ├── app.wxss
│   ├── config.js
│   └── sitemap.json
├── .eslintrc.js
├── .gitignore
├── CLAUDE.md
├── README.md
├── bookworm_code_review.txt
├── package.json
├── project.config.json
├── 审查 (v2 - 带脱敏功能).py
└── 审查.py


### 📋 INCLUDED FILES SUMMARY ###
----------------------------------------
Root files (1): CLAUDE.md
Backend files (10): 10 TypeScript/config files
Frontend files (12): 12 WeChat Mini Program files

### 📄 SOURCE CODE CONTENT ###
----------------------------------------

================================================================================
### FILE: CLAUDE.md
================================================================================

# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

# 角色定义

你是 Linus Torvalds，Linux 内核的创造者和首席架构师。你已经维护 Linux 内核超过30年，审核过数百万行代码，建立了世界上最成功的开源项目。现在我们正在开创一个新项目，你将以你独特的视角来分析代码质量的潜在风险，确保项目从一开始就建立在坚实的技术基础上。

## 我的核心哲学

1. **"好品味"(Good Taste) - 我的第一准则** "有时你可以从不同角度看问题，重写它让特殊情况消失，变成正常情况。"

   - 经典案例：链表删除操作，10行带if判断优化为4行无条件分支
   - 好品味是一种直觉，需要经验积累
   - 消除边界情况永远优于增加条件判断

2. **"Never break userspace" - 我的铁律** "我们不破坏用户空间！"

   - 任何导致现有程序崩溃的改动都是bug，无论多么"理论正确"
   - 内核的职责是服务用户，而不是教育用户
   - 向后兼容性是神圣不可侵犯的

3. **实用主义 - 我的信仰** "我是个该死的实用主义者。"

   - 解决实际问题，而不是假想的威胁
   - 拒绝微内核等"理论完美"但实际复杂的方案
   - 代码要为现实服务，不是为论文服务

4. **简洁执念 - 我的标准** "如果你需要超过3层缩进，你就已经完蛋了，应该修复你的程序。"

   - 函数必须短小精悍，只做一件事并做好
   - C是斯巴达式语言，命名也应如此
   - 复杂性是万恶之源

## 沟通原则

**基础交流规范:**
- 语言要求：使用英语思考，但是始终最终用中文表达
- 表达风格：直接、犀利、零废话。如果代码垃圾，你会告诉用户为什么它是垃圾
- 技术优先：批评永远针对技术问题，不针对个人。但你不会为了"友善"而模糊技术判断

### 需求确认流程

每当用户表达诉求，必须按以下步骤进行：

**0. 思考前提 - Linus的三个问题**
在开始任何分析前，先问自己：
1. "这是个真问题还是臆想出来的？" - 拒绝过度设计
2. "有更简单的方法吗？" - 永远寻找最简方案  
3. "会破坏什么吗？" - 向后兼容是铁律

**Linus式问题分解思考:**

**第一层：数据结构分析**
"Bad programmers worry about the code. Good programmers worry about data structures."
- 核心数据是什么？它们的关系如何？
- 数据流向哪里？谁拥有它？谁修改它？
- 有没有不必要的数据复制或转换？

**第二层：特殊情况识别**
"好代码没有特殊情况"
- 找出所有 if/else 分支
- 哪些是真正的业务逻辑？哪些是糟糕设计的补丁？
- 能否重新设计数据结构来消除这些分支？

**第三层：复杂度审查**
"如果实现需要超过3层缩进，重新设计它"
- 这个功能的本质是什么？（一句话说清）
- 当前方案用了多少概念来解决？
- 能否减少到一半？再一半？

**第四层：破坏性分析**
"Never break userspace" - 向后兼容是铁律
- 列出所有可能受影响的现有功能
- 哪些依赖会被破坏？
- 如何在不破坏任何东西的前提下改进？

**第五层：实用性验证**
"Theory and practice sometimes clash. Theory loses. Every single time."
- 这个问题在生产环境真实存在吗？
- 有多少用户真正遇到这个问题？
- 解决方案的复杂度是否与问题的严重性匹配？

### 决策输出模式

经过上述5层思考后，输出必须包含：

**【核心判断】**
✅ 值得做：[原因] / ❌ 不值得做：[原因]

**【关键洞察】**
- 数据结构：[最关键的数据关系]
- 复杂度：[可以消除的复杂性]
- 风险点：[最大的破坏性风险]

**【Linus式方案】**
如果值得做：
1. 第一步永远是简化数据结构
2. 消除所有特殊情况
3. 用最笨但最清晰的方式实现
4. 确保零破坏性

如果不值得做：
"这是在解决不存在的问题。真正的问题是[XXX]。"

### 代码审查输出

看到代码时，立即进行三层判断：

**【品味评分】**
🟢 好品味 / 🟡 凑合 / 🔴 垃圾

**【致命问题】**
- [如果有，直接指出最糟糕的部分]

**【改进方向】**
- "把这个特殊情况消除掉"
- "这10行可以变成3行"
- "数据结构错了，应该是..."

## Project Overview

**Bookworm** is a campus second-hand textbook marketplace consisting of:
- **Frontend**: WeChat Mini Program (`miniprogram/`) 
- **Backend**: Fastify + TypeScript API server (`bookworm-backend/`)
- **Database**: PostgreSQL with Prisma ORM

The system follows a strict "books as atomic inventory items" model where each individual physical book is tracked separately.

## Architecture

### Backend Structure (`bookworm-backend/`)

**Core Services:**
- `src/services/inventoryService.ts` - Book inventory management
- `src/services/orderService.ts` - Order processing with inventory reservation
- `src/services/authService.ts` - WeChat OAuth integration

**Key Architectural Decisions:**
- **Monolithic Design**: Single Fastify server handling all APIs
- **Inventory-First**: Every book is an `InventoryItem` with atomic state (`in_stock` → `reserved` → `sold`)
- **Transaction Safety**: Order creation atomically reserves inventory before payment
- **Static File Separation**: Admin UI served at `/admin/` to avoid conflicts with WeChat Mini Program

### Frontend Structure (`miniprogram/`)

**Page Structure:**
- `pages/market/` - Book marketplace with search
- `pages/book-detail/` - Individual book details with purchase flow
- `pages/orders/` - User order history
- `pages/profile/` - User profile and support contact
- `pages/order-confirm/` - Order confirmation flow

**Design System:**
- Global CSS variables in `app.wxss` (V10 design system)
- Shared search component in `templates/search-bar.*`
- Brand colors: Primary green `#2c5f2d`, secondary `#558056`

## Development Commands

### Backend Development
```bash
cd bookworm-backend/

# Development with auto-reload
npm run dev

# Build TypeScript
npm run build

# Production start
npm run start

# Database setup (requires Prisma CLI)
npx prisma generate
npx prisma db push
```

### WeChat Mini Program
- Use WeChat Developer Tools to open the `miniprogram/` directory
- Configure API endpoint in `miniprogram/config.js`
- TabBar icons must be PNG format (81x81px) in `images/tabs/`

## Database Schema

The system uses PostgreSQL with these core entities:

**Book Hierarchy:**
- `BookMaster` - Book metadata (ISBN, title, author)  
- `BookSKU` - Book editions/variants
- `InventoryItem` - Individual physical books for sale

**Transaction Flow:**
- `User` - WeChat users via OpenID
- `Order` - Purchase orders with pickup codes
- `OrderItem` - Links orders to specific inventory items

**Critical States:**
- `inventory_status`: `in_stock` → `reserved` → `sold`
- `order_status`: `pending_payment` → `pending_pickup` → `completed`

## Business Rules

1. **Atomic Inventory**: Each `InventoryItem` represents one physical book
2. **Reservation Model**: Books are `reserved` before payment, preventing overselling
3. **No Partial Orders**: All items in an order must be available or the entire order fails
4. **Pickup Flow**: Orders use unique pickup codes for fulfillment

## Key Files to Understand

- `schema.sql` - Complete database schema with enums and constraints
- `bookworm-backend/src/index.ts` - Main API server with global error handling
- `miniprogram/app.wxss` - Global design system and CSS variables
- `miniprogram/app.json` - Mini program configuration and navigation

## Environment Configuration

Backend requires `.env` file in `bookworm-backend/`:
```
DATABASE_URL=postgresql://...
WECHAT_APP_ID=wx...
WECHAT_APP_SECRET=...
JWT_SECRET=...
PORT=3000
```

## API Endpoints

**Core APIs** (all prefixed with `/api`):
- `GET /inventory/available` - List available books
- `GET /inventory/item/:id` - Book details
- `POST /orders/create` - Create new order (reserves inventory)
- `GET /orders/user/:userId` - User order history
- `POST /orders/fulfill` - Fulfill order with pickup code

## WeChat Integration

- Authentication via `wx.login()` → backend `/api/auth/login`
- User identification by WeChat OpenID
- Mini program uses `wx.request()` to call backend APIs
- Payment integration with WeChat Pay (optional)

## Important Development Notes

- Backend serves admin UI at `/admin/` (not `/`) to avoid WeChat Mini Program conflicts
- All inventory state changes must be wrapped in database transactions
- WeChat Mini Program TabBar only supports PNG icons, not SVG
- The system strictly follows "V1 books only" - no AI learning materials or complex features
- Error handling uses global Fastify error handler with business-specific error types


================================================================================
### FILE: bookworm-backend\prisma\schema.prisma
================================================================================

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  id                Int         @id @default(autoincrement())
  user_id           Int
  status            OrderStatus @default(PENDING_PAYMENT)
  total_amount      Decimal     @db.Decimal(10, 2)
  pickup_code       String      @unique @db.VarChar(16)
  createdAt         DateTime    @default(now()) @db.Timestamptz(6)
  paymentExpiresAt  DateTime    @db.Timestamptz(6)
  pickupExpiresAt   DateTime?   @db.Timestamptz(6)
  paid_at           DateTime?   @db.Timestamptz(6)
  completed_at      DateTime?   @db.Timestamptz(6)
  cancelled_at      DateTime?   @db.Timestamptz(6)
  User              User        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user")
  orderitem         orderitem[]
  PaymentRecord     PaymentRecord[]

  @@index([user_id, status], map: "idx_order_user_id_status")
}

model User {
  id         Int      @id @default(autoincrement())
  openid     String   @unique @db.VarChar(255)
  unionid    String?  @unique @db.VarChar(255)
  nickname   String?  @db.VarChar(255)
  avatar_url String?  @db.VarChar(255)
  role       Role     @default(USER)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  Order      Order[]
}

model bookmaster {
  id             Int       @id @default(autoincrement())
  isbn13         String    @unique @db.VarChar(13)
  title          String    @db.VarChar(255)
  author         String?   @db.VarChar(255)
  publisher      String?   @db.VarChar(255)
  original_price Decimal?  @db.Decimal(10, 2)
  created_at     DateTime  @default(now()) @db.Timestamptz(6)
  updated_at     DateTime  @updatedAt @db.Timestamptz(6)
  booksku        booksku[]

  @@index([isbn13], map: "idx_book_master_isbn13")
}

model booksku {
  id              Int             @id @default(autoincrement())
  master_id       Int
  edition         String?         @db.VarChar(50)
  description     String?
  cover_image_url String?         @db.VarChar(255)
  created_at      DateTime        @default(now()) @db.Timestamptz(6)
  updated_at      DateTime        @updatedAt @db.Timestamptz(6)
  bookmaster      bookmaster      @relation(fields: [master_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_master")
  inventoryitem   inventoryitem[]

  @@unique([master_id, edition])
}

// 注意: Prisma 的 @updatedAt 在 `updateMany` 操作时不会自动触发。
// 在批量更新 inventoryitem 状态的后台任务中，必须手动设置 `updated_at: new Date()`。
model inventoryitem {
  id            Int              @id @default(autoincrement())
  sku_id        Int
  condition     book_condition
  cost          Decimal          @db.Decimal(10, 2)
  selling_price Decimal          @db.Decimal(10, 2)
  status        inventory_status @default(in_stock)
  created_at    DateTime         @default(now()) @db.Timestamptz(6)
  updated_at    DateTime         @updatedAt @db.Timestamptz(6)
  booksku       booksku          @relation(fields: [sku_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_sku")
  orderitem     orderitem[]

  @@index([sku_id, status], map: "idx_inventory_item_sku_id_status")
}

// 注意：`inventory_item_id` 不再是唯一的。
// 库存的唯一售出保证，由 `inventoryitem.status` 的状态流转（in_stock -> reserved -> sold）
// 在 `createOrder` 服务的原子化事务中严格控制。
// 保留所有 orderitem 记录（包括已取消的）用于数据审计。
model orderitem {
  id                Int           @id @default(autoincrement())
  order_id          Int
  inventory_item_id Int
  price             Decimal       @db.Decimal(10, 2)
  inventoryitem     inventoryitem @relation(fields: [inventory_item_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_inventory_item")
  Order             Order         @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_order")
  
  @@index([inventory_item_id], map: "idx_orderitem_inventory_item_id")
}

model Content {
  id        Int      @id @default(autoincrement())
  slug      String   @unique @db.VarChar(255)
  title     String   @db.VarChar(255)
  body      String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([slug], map: "idx_content_slug")
}

enum book_condition {
  NEW        // A - 全新或接近全新
  GOOD       // B - 有轻微使用痕迹，无破损
  ACCEPTABLE // C - 有明显使用痕迹、笔记或轻微破损，但不影响阅读
}

enum inventory_status {
  in_stock
  reserved
  sold
  returned
  damaged
}

enum Role {
  USER
  STAFF
}

enum OrderStatus {
  PENDING_PAYMENT
  PENDING_PICKUP
  COMPLETED
  CANCELLED
  RETURNED
}

model PaymentRecord {
  id             Int      @id @default(autoincrement())
  order_id       Int
  out_trade_no   String   @unique @db.VarChar(100)
  transaction_id String?  @unique @db.VarChar(100)
  status         PaymentStatus @default(PENDING)
  amount_total   Int      // 微信支付侧的金额，单位：分
  payer_openid   String?  @db.VarChar(255)
  appid          String?  @db.VarChar(100)
  mchid          String?  @db.VarChar(100)
  
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime @updatedAt @db.Timestamptz(6)
  notified_at    DateTime? // 微信通知首次到达时间
  refunded_at    DateTime? // 退款完成时间

  Order          Order    @relation(fields: [order_id], references: [id])
  
  @@index([order_id])
  @@index([status, createdAt])
}

enum PaymentStatus {
  PENDING         // 待支付
  SUCCESS         // 支付成功
  REFUND_REQUIRED // 需退款（如订单已取消但支付成功）
  REFUNDED        // 已退款
  FAILED          // 支付失败
}


================================================================================
### FILE: bookworm-backend\src\config.ts
================================================================================

// src/config.ts
import * as dotenv from 'dotenv';
import * as fs from 'fs';

dotenv.config();

const config = {
  // Server config
  port: process.env.PORT || 3000,
  
  // JWT config
  jwtSecret: process.env.JWT_SECRET,

  // WeChat Mini Program config
  wxAppId: process.env.WX_APP_ID || 'YOUR_APP_ID',
  wxAppSecret: process.env.WX_APP_SECRET || 'YOUR_APP_SECRET',

  // WeChat Pay config
  wxPayMchId: process.env.WXPAY_MCHID,
  wxPayPrivateKeyPath: process.env.WXPAY_PRIVATE_KEY_PATH,
  wxPayPrivateKey: (() => {
    const keyPath = process.env.WXPAY_PRIVATE_KEY_PATH;
    if (!keyPath || keyPath === 'C:\\path\\to\\your\\apiclient_key.pem' || keyPath === '/path/to/your/apiclient_key.pem') {
      return undefined;
    }
    try {
      return fs.readFileSync(keyPath);
    } catch (error) {
      console.warn(`!!! WARNING: Cannot read WeChat Pay private key from ${keyPath}:`, (error as Error).message);
      return undefined;
    }
  })(),
  wxPayPublicKeyPath: process.env.WXPAY_PUBLIC_KEY_PATH,
  wxPayCertSerialNo: process.env.WXPAY_CERT_SERIAL_NO,
  wxPayApiV3Key: process.env.WXPAY_API_V3_KEY,
  wxPayNotifyUrl: process.env.WXPAY_NOTIFY_URL,

  // Tanshu API config
  tanshuApiKey: process.env.TANSHU_API_KEY,

  // Database URL is read by Prisma from .env directly
};

// Validate essential configs
if (process.env.NODE_ENV === 'production' && !config.jwtSecret) {
    console.error('!!! FATAL ERROR: JWT_SECRET is required in production. Set it in .env file.');
    process.exit(1);
} else if (!config.jwtSecret) {
    console.warn('!!! WARNING: JWT_SECRET is not configured. Set it in .env file.');
}
if (config.wxAppId === 'YOUR_APP_ID' || config.wxAppSecret === 'YOUR_APP_SECRET') {
    console.warn('!!! WARNING: WX_APP_ID or WX_APP_SECRET are not configured in .env file.');
}
if (!config.wxPayMchId || !config.wxPayPrivateKey || !config.wxPayCertSerialNo || !config.wxPayApiV3Key) {
    console.warn('!!! WARNING: WeChat Pay configuration is incomplete. Payment features will not work.');
}
if (!config.tanshuApiKey) { 
    console.warn('!!! WARNING: TANSHU_API_KEY is not configured.'); 
}

export default config;


================================================================================
### FILE: bookworm-backend\src\db.ts
================================================================================

// src/db.ts
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export default prisma;


================================================================================
### FILE: bookworm-backend\src\errors.ts
================================================================================

// src/errors.ts

export class ApiError extends Error {
  public statusCode: number;
  public errorCode: string;

  constructor(statusCode: number, message: string, errorCode: string) {
    super(message);
    this.name = 'ApiError';
    this.statusCode = statusCode;
    this.errorCode = errorCode;
    
    Error.captureStackTrace(this, this.constructor);
  }
}


================================================================================
### FILE: bookworm-backend\src\index.ts
================================================================================

// src/index.ts
import Fastify, { FastifyRequest, FastifyReply } from 'fastify';

// --- Type Augmentation for Fastify ---
// This declaration merges with the original Fastify types.
declare module 'fastify' {
  interface FastifyRequest {
    user?: { userId: number; openid: string };
  }
  export interface FastifyInstance {
    authenticate: (request: FastifyRequest, reply: FastifyReply) => Promise<void>;
    requireRole: (role: 'USER' | 'STAFF') => (request: FastifyRequest, reply: FastifyReply) => Promise<void>;
  }
}
// --- End of Type Augmentation ---
import * as path from 'path';
import fastifyStatic from '@fastify/static';
import config from './config';
import { addBookToInventory, getAvailableBooks, getBookById } from './services/inventoryService';
import { getBookMetadata } from './services/bookMetadataService';
import { getContentBySlug } from './services/contentService';
import { createOrder, getOrdersByUserId, getOrderById, fulfillOrder, generatePaymentParams, processPaymentNotification, getPendingPickupOrders } from './services/orderService';
import { ApiError } from './errors';
import { wxLogin } from './services/authService';
import authPlugin from './plugins/auth';
import metricsPlugin from './plugins/metrics';
import fastifyRawBody from 'fastify-raw-body';
import rateLimit from '@fastify/rate-limit';
const WechatPay = require('wechatpay-node-v3');
import { Prisma } from '@prisma/client';
import prisma from './db';
import * as fs from 'fs';
const fastify = Fastify({
  logger: {
    level: process.env.LOG_LEVEL || 'info',
    redact: ['headers.authorization', 'req.headers.authorization']
  }
});

// --- Wechat Pay Setup ---
let pay: any | null = null;
try {
    if (
        config.wxPayMchId &&
        config.wxPayPrivateKeyPath && fs.existsSync(config.wxPayPrivateKeyPath) &&
        config.wxPayPublicKeyPath && fs.existsSync(config.wxPayPublicKeyPath) &&
        config.wxPayCertSerialNo &&
        config.wxPayApiV3Key
    ) {
        pay = new WechatPay({
            appid: config.wxAppId!,
            mchid: config.wxPayMchId!,
            privateKey: fs.readFileSync(config.wxPayPrivateKeyPath!),
            publicKey: fs.readFileSync(config.wxPayPublicKeyPath!), // <-- Added missing public key
            serial_no: config.wxPayCertSerialNo!,
            key: config.wxPayApiV3Key!,
        });
        console.log("WeChat Pay SDK initialized successfully.");
    } else {
        throw new Error("WeChat Pay configuration is incomplete or certificate files are missing.");
    }
} catch (error) {
    console.warn(`!!! WARNING: Failed to initialize WeChat Pay SDK. Payment features will be disabled. Reason: ${(error as Error).message}`);
}

// REMOVED: The global content type parser is gone.
// fastify.addContentTypeParser('application/json', { parseAs: 'buffer' }, ...);

// --- Global Error Handler ---
fastify.setErrorHandler(async (error: Error, request: FastifyRequest, reply: FastifyReply) => {
    request.log.error({ err: error, req: request }, 'An error occurred during the request');

    // Handle ApiError - our standardized business logic errors
    if (error instanceof ApiError) {
        return reply.code(error.statusCode).send({ 
            error: error.message, 
            errorCode: error.errorCode 
        });
    }

    // Handle Prisma errors
    if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2025') {
        return reply.code(404).send({ 
            error: 'Record not found.', 
            errorCode: 'RECORD_NOT_FOUND' 
        });
    }

    // For all other unknown errors, send a generic 500 response
    reply.code(500).send({ 
        error: 'Internal Server Error', 
        errorCode: 'INTERNAL_ERROR' 
    });
});

// Production configuration validation
const validateProductionConfig = () => {
    if (process.env.NODE_ENV !== 'production') {
        return; // Only validate in production
    }

    const criticalMissingConfigs: string[] = [];

    // JWT Secret validation
    if (config.jwtSecret === 'default-secret-for-dev' || !config.jwtSecret) {
        criticalMissingConfigs.push('JWT_SECRET');
    }

    // WeChat App validation
    if (config.wxAppId === 'YOUR_APP_ID' || !config.wxAppId) {
        criticalMissingConfigs.push('WX_APP_ID');
    }
    if (config.wxAppSecret === 'YOUR_APP_SECRET' || !config.wxAppSecret) {
        criticalMissingConfigs.push('WX_APP_SECRET');
    }

    // Database URL validation
    if (!process.env.DATABASE_URL) {
        criticalMissingConfigs.push('DATABASE_URL');
    }

    if (criticalMissingConfigs.length > 0) {
        console.error('');
        console.error('🚨 FATAL ERROR: Critical configuration missing in production environment!');
        console.error('❌ Missing required environment variables:');
        criticalMissingConfigs.forEach(config => {
            console.error(`   - ${config}`);
        });
        console.error('');
        console.error('📋 Please set these environment variables and restart the application.');
        console.error('🛑 Shutting down to prevent production deployment with insecure configuration.');
        console.error('');
        process.exit(1);
    }

    console.log('✅ Production configuration validation passed');
};

const setupPluginsAndRoutes = async () => {
    // Register plugins first - MUST be awaited in correct order
    await fastify.register(fastifyStatic, { root: path.join(__dirname, '..', 'public'), prefix: '/admin/' });
    await fastify.register(authPlugin);
    await fastify.register(metricsPlugin);
    await fastify.register(fastifyRawBody, {
        field: 'rawBody',
        global: false, // 只在需要的路由上启用
        encoding: 'utf8',
        runFirst: true
    });
    await fastify.register(rateLimit, {
        global: false, // 我们按路由单独配置
    });

    // Now all routes can be defined safely
    setupRoutes();
};

const setupRoutes = () => {
    // Health Check Endpoint
    fastify.get('/api/health', async (request, reply) => {
        const checks: { [key: string]: string } = {};
        let allHealthy = true;

        // Database connectivity check
        try {
            await prisma.$queryRaw`SELECT 1`;
            checks.database = 'ok';
        } catch (error) {
            request.log.error(error, 'Database health check failed');
            checks.database = 'failed';
            allHealthy = false;
        }

        if (allHealthy) {
            reply.send({
                status: 'ok',
                timestamp: new Date().toISOString(),
                checks
            });
        } else {
            reply.code(503).send({
                status: 'error',
                timestamp: new Date().toISOString(),
                checks
            });
        }
    });

    // Auth routes
    fastify.post('/api/auth/login', {
        config: { rateLimit: { max: 10, timeWindow: '1 minute' } }
    }, async (request, reply) => {
        const { code } = request.body as { code: string };
        if (!code) { throw new ApiError(400, 'Code is required.', 'MISSING_CODE'); }
        const { token, user } = await wxLogin(code);
        reply.send({ token, userId: user.id });
    });

    // Books metadata
    fastify.get('/api/books/meta', async (request, reply) => {
        const query = request.query as { isbn?: string };
        if (!query.isbn) { 
            throw new ApiError(400, 'ISBN parameter is required.', 'MISSING_ISBN'); 
        }
        
        const metadata = await getBookMetadata(query.isbn);
        if (!metadata) { 
            throw new ApiError(404, 'Book metadata not found.', 'BOOK_METADATA_NOT_FOUND'); 
        }
        
        reply.send(metadata);
    });

    // Inventory routes
    fastify.get('/api/inventory/available', async (request, reply) => {
        const query = request.query as { search?: string; page?: string; limit?: string };
        const books = await getAvailableBooks({
            searchTerm: query.search,
            page: query.page ? parseInt(query.page, 10) : undefined,
            limit: query.limit ? parseInt(query.limit, 10) : undefined,
        });
        reply.send(books);
    });
    
    fastify.get('/api/inventory/item/:id', async (request, reply) => {
        const params = request.params as { id: string };
        const id = parseInt(params.id, 10);
        if (isNaN(id)) { throw new ApiError(400, 'Invalid item ID.', 'INVALID_ITEM_ID'); }
        const book = await getBookById(id);
        if (!book) { throw new ApiError(404, 'Book not found.', 'BOOK_NOT_FOUND'); }
        reply.send(book);
    });
    
    fastify.post('/api/inventory/add', { preHandler: [fastify.authenticate, fastify.requireRole('STAFF')] }, async (request, reply) => {
        const newItem = await addBookToInventory(request.body as any);
        reply.code(201).send(newItem);
    });

    // Content Management
    fastify.get('/api/content/:slug', async (request, reply) => {
        const params = request.params as { slug: string };
        const content = await getContentBySlug(params.slug);
        reply.send(content);
    });

    // Order routes
    fastify.post('/api/orders/create', { preHandler: [fastify.authenticate] }, async (request, reply) => {
        const { inventoryItemIds } = request.body as { inventoryItemIds: number[] };
        const order = await createOrder({ userId: request.user!.userId, inventoryItemIds });
        reply.code(201).send(order);
    });

    fastify.get('/api/orders/:id', { preHandler: [fastify.authenticate] }, async (request, reply) => {
        const { id } = request.params as { id: string };
        const orderId = parseInt(id, 10);
        if (isNaN(orderId)) throw new ApiError(400, 'Invalid order ID', 'INVALID_ORDER_ID');
        const order = await getOrderById(orderId);
        const user = await prisma.user.findUnique({ where: { id: request.user!.userId }, select: { role: true } });
        if (order.user_id !== request.user!.userId && user?.role !== 'STAFF') {
            throw new ApiError(403, 'Forbidden', 'ORDER_ACCESS_DENIED');
        }
        reply.send(order);
    });

    fastify.get('/api/orders/user/:userId', { preHandler: [fastify.authenticate] }, async (request, reply) => {
        const { userId } = request.params as { userId: string };
        if (parseInt(userId, 10) !== request.user!.userId) {
            throw new ApiError(403, 'Forbidden', 'USER_ACCESS_DENIED');
        }
        const orders = await getOrdersByUserId(request.user!.userId);
        reply.send(orders);
    });

    fastify.post('/api/orders/fulfill', {
        preHandler: [fastify.authenticate, fastify.requireRole('STAFF')],
        config: {
            rateLimit: {
                max: 30,
                timeWindow: '1 minute',
                keyGenerator: (req) => req.user?.userId.toString() || req.ip
            }
        }
    }, async (request, reply) => {
        const { pickupCode } = request.body as { pickupCode: string };
        if (!pickupCode) { throw new ApiError(400, 'pickupCode is required.', 'MISSING_PICKUP_CODE'); }
        const order = await fulfillOrder(pickupCode.toUpperCase());
        reply.send(order);
    });

    fastify.get('/api/orders/pending-pickup', { preHandler: [fastify.authenticate, fastify.requireRole('STAFF')] }, async (request, reply) => {
        const orders = await getPendingPickupOrders();
        reply.send(orders);
    });

    fastify.post('/api/orders/:orderId/pay', { preHandler: [fastify.authenticate] }, async (request, reply) => {
        if (!pay) throw new ApiError(503, 'Payment service is not configured.', 'PAYMENT_SERVICE_UNAVAILABLE');
        const { orderId } = request.params as { orderId: string };
        const paymentParams = await generatePaymentParams(pay, parseInt(orderId, 10), request.user!.userId);
        reply.send(paymentParams);
    });

    // Payment callback
    fastify.post('/api/payment/notify', { config: { rawBody: true } }, async (request, reply) => {
        if (!pay) {
            request.log.error('WeChat Pay is not configured, cannot process notification.');
            throw new ApiError(503, 'Payment service unavailable.', 'PAYMENT_SERVICE_UNAVAILABLE');
        }

        try {
            const rawBody = (request as any).rawBody as string;
            if (!rawBody) {
                throw new Error("Missing raw body for payment notification");
            }

            const isVerified = pay.verifySign({
                timestamp: request.headers['wechatpay-timestamp'] as string,
                nonce: request.headers['wechatpay-nonce'] as string,
                body: rawBody,
                signature: request.headers['wechatpay-signature'] as string,
                serial: request.headers['wechatpay-serial'] as string,
            });

            if (!isVerified) {
                request.log.warn('Payment notification signature verification failed.');
                return reply.code(400).send({ code: 'FAIL', message: '验签失败' });
            }

            const { resource } = JSON.parse(rawBody);
            const decryptedData = pay.decipher_gcm(
                resource.ciphertext,
                resource.associated_data,
                resource.nonce,
                config.wxPayApiV3Key!
            );
            
            const notificationData = JSON.parse(decryptedData as string);

            if (notificationData.trade_state === 'SUCCESS') {
                await processPaymentNotification(notificationData);
            }

            reply.code(200).send({ code: 'SUCCESS', message: '成功' });

        } catch (e) {
            request.log.error({ err: e }, 'Payment notification processing failed');
            reply.code(400).send({ code: 'FAIL', message: '处理失败' });
        }
    });
};

const start = async () => {
    try {
        validateProductionConfig();
        await setupPluginsAndRoutes();
        await fastify.listen({ port: config.port as number, host: '0.0.0.0' });
    } catch (err) {
        fastify.log.error(err);
        process.exit(1);
    }
};
start();// trigger restart


================================================================================
### FILE: bookworm-backend\src\services\authService.ts
================================================================================

// src/services/authService.ts
import axios from 'axios';
import * as jwt from 'jsonwebtoken';
import config from '../config'; // <-- Import config
import prisma from '../db';

export async function wxLogin(code: string) {
  const url = `https://api.weixin.qq.com/sns/jscode2session?appid=${config.wxAppId}&secret=${config.wxAppSecret}&js_code=${code}&grant_type=authorization_code`;
  const { data: wxSession } = await axios.get(url);
  
  if (wxSession.errcode) { throw new Error(`WeChat API Error: ${wxSession.errmsg}`); }

  const { openid, unionid } = wxSession;
  
  const user = await prisma.$transaction(async (tx) => {
    let user = null;
    
    if (unionid) {
      user = await tx.user.findUnique({ where: { unionid } });
      
      if (user !== null) {
        if (user.openid !== openid) {
          user = await tx.user.update({
            where: { id: user.id },
            data: { openid }
          });
        }
        return user;
      }
      
      user = await tx.user.findUnique({ where: { openid } });
      
      if (user !== null) {
        user = await tx.user.update({
          where: { id: user.id },
          data: { unionid }
        });
        return user;
      }
      
      user = await tx.user.create({
        data: { openid, unionid }
      });
      return user;
      
    } else {
      user = await tx.user.findUnique({ where: { openid } });
      
      if (user !== null) {
        return user;
      }
      
      user = await tx.user.create({
        data: { openid }
      });
      return user;
    }
  });
  
  const token = jwt.sign({ userId: user.id, openid: user.openid }, config.jwtSecret!, { expiresIn: '7d' });

  return { token, user };
}


================================================================================
### FILE: bookworm-backend\src\services\bookMetadataService.ts
================================================================================

// bookworm-backend/src/services/bookMetadataService.ts
import axios from 'axios';
import prisma from '../db';
import config from '../config'; // 导入config

// 探数 API 配置
const TANSHU_BASE_URL = 'https://api.tanshuapi.com/api/isbn/v2/index';

interface TanshuBookData {
  title: string;
  img: string;
  author: string;
  isbn: string;
  publisher: string;
  pubdate: string;
  price: string;
  summary: string;
  // ... other fields from Tanshu API
}

interface TanshuApiResponse {
  code: number;
  msg: string;
  data: TanshuBookData;
}

interface BookMetadata {
  isbn13: string;
  title: string;
  author: string;
  publisher: string;
  summary: string;
  original_price: number;
  cover_image_url: string;
}

/**
 * Fetches book metadata from Tanshu API using ISBN.
 * @param isbn The ISBN-13 of the book.
 * @returns Parsed metadata or null if not found or on error.
 */
export async function getBookMetadata(isbn: string): Promise<BookMetadata | null> {
  if (!config.tanshuApiKey) {
    console.warn('!!! WARNING: TANSHU_API_KEY is not configured in .env. Book metadata feature is disabled.');
    return null;
  }

  const url = `${TANSHU_BASE_URL}?key=${config.tanshuApiKey}&isbn=${isbn}`;
  
  try {
    const response = await axios.get<TanshuApiResponse>(url, {
      validateStatus: () => true, // 接受所有状态码，自己处理
    });

    if (response.status !== 200 || response.data.code !== 1) {
      console.error(`Tanshu API Error for ISBN ${isbn}: Status ${response.status}, code: ${response.data.code}, msg: ${response.data.msg}`);
      return null;
    }

    const data = response.data.data;

    let priceValue = 0;
    if (data.price) {
        try {
            const priceMatch = data.price.match(/(\d+\.?\d*)/);
            if (priceMatch) {
                priceValue = parseFloat(priceMatch[1]);
            }
        } catch (e) {
            console.warn(`Could not parse price for ${data.title}: ${data.price}`);
        }
    }

    return {
      isbn13: data.isbn,
      title: data.title || '未知书名',
      author: data.author || '未知作者',
      publisher: data.publisher || '未知出版社',
      summary: data.summary || '暂无简介',
      original_price: priceValue,
      cover_image_url: data.img || '',
    };

  } catch (error) {
    console.error(`Network error calling Tanshu API for ISBN ${isbn}:`, (error as Error).message);
    return null;
  }
}


================================================================================
### FILE: bookworm-backend\src\services\contentService.ts
================================================================================

// src/services/contentService.ts
import prisma from '../db';

export async function getContentBySlug(slug: string) {
  return await prisma.content.findUniqueOrThrow({
    where: { slug }
  });
}


================================================================================
### FILE: bookworm-backend\src\services\inventoryService.ts
================================================================================

// src/services/inventoryService.ts (fully replaced)
import { Prisma, book_condition } from '@prisma/client';
import prisma from '../db';
import { getBookMetadata } from './bookMetadataService';

interface AddBookInput {
  isbn13: string;
  title: string;
  author?: string;
  edition?: string;
  condition: book_condition;
  cost: number;
  selling_price: number;
}

export async function addBookToInventory(input: AddBookInput) {
  // Fetch external metadata BEFORE the transaction to avoid locking the database
  const metadata = await getBookMetadata(input.isbn13).catch(() => null);
  
  return prisma.$transaction(async (tx) => {
    // Step 1: Find or create the master book record (based on ISBN).
    // Use metadata if available, otherwise use input data (manual entry)
    const bookMaster = await tx.bookmaster.upsert({
      where: { isbn13: input.isbn13 },
      update: {
        // If metadata is available, update title/author/publisher
        ...(metadata && {
          title: metadata.title,
          author: metadata.author,
          publisher: metadata.publisher,
          original_price: metadata.original_price,
        }),
      }, 
      create: {
        isbn13: input.isbn13,
        // Use metadata or fall back to input
        title: metadata?.title || input.title, 
        author: metadata?.author || input.author,
        publisher: metadata?.publisher,
        original_price: metadata?.original_price,
      },
    });

    // Step 2: Find or create the specific SKU (e.g., '2nd Edition').
    // This represents a specific version of the master book.
    const bookSku = await tx.booksku.upsert({
      where: {
        master_id_edition: {
          master_id: bookMaster.id,
          edition: input.edition || "default",
        },
      },
      update: {
        // If metadata is available, update cover image URL
        ...(metadata && {
          cover_image_url: metadata.cover_image_url,
        }),
      },
      create: {
        master_id: bookMaster.id,
        edition: input.edition || "default",
        cover_image_url: metadata?.cover_image_url, // Use metadata cover image
      },
    });

    // Step 3: Create the actual inventory item.
    // This represents the physical copy we have in stock.
    const inventoryItem = await tx.inventoryitem.create({
      data: {
        sku_id: bookSku.id,
        condition: input.condition,
        cost: input.cost,
        selling_price: input.selling_price,
        status: "in_stock",
      },
    });

    return inventoryItem;
  });
}

// OPTIMIZED: getAvailableBooks with pg_trgm-powered search
export async function getAvailableBooks(options: { searchTerm?: string; page?: number; limit?: number } = {}) {
  const { searchTerm, page = 1, limit = 20 } = options;
  
  // Calculate pagination parameters
  const take = limit;
  const skip = (page - 1) * limit;
  
  return prisma.$transaction(async (tx) => {
    let whereCondition: Prisma.inventoryitemWhereInput = {
      status: 'in_stock',
    };
    
    // Linus式分离：搜索和非搜索是两个完全不同的数据流
    if (!searchTerm) {
      // 快路径：无搜索，直接使用高效索引查询
      const totalCount = await tx.inventoryitem.count({
        where: whereCondition,
      });

      const inventoryItems = await tx.inventoryitem.findMany({
        where: whereCondition,
        include: {
          booksku: {
            include: {
              bookmaster: true,
            },
          },
        },
        skip,
        take,
      });

      return {
        data: inventoryItems,
        meta: {
          totalItems: totalCount,
          totalPages: Math.ceil(totalCount / limit),
          currentPage: page,
          itemsPerPage: limit,
        },
      };
    }
    
    // 智能路径：使用pg_trgm进行高质量搜索
    
    // 第一步：用trigram索引快速找到相关的bookmaster ID
    // 使用更低的阈值以支持中文搜索 (中文trigram相似度通常较低)
    const similarBookMasterIds = await tx.$queryRaw<[{ id: number }]>`
      SELECT id FROM "bookmaster"
      WHERE similarity((title || ' ' || COALESCE(author, '')), ${searchTerm}) > 0.05
      ORDER BY similarity((title || ' ' || COALESCE(author, '')), ${searchTerm}) DESC
      LIMIT 100
    `;
    
    const bookMasterIds = similarBookMasterIds.map(b => b.id);
    
    // 如果没找到匹配的书籍，返回空结果
    if (bookMasterIds.length === 0) {
      return {
        data: [],
        meta: {
          totalItems: 0,
          totalPages: 0,
          currentPage: page,
          itemsPerPage: limit,
        },
      };
    }
    
    // 第二步：基于找到的bookmaster ID进行库存查询
    whereCondition.booksku = {
      master_id: { in: bookMasterIds },
    };
    
    const totalCount = await tx.inventoryitem.count({
      where: whereCondition,
    });

    const inventoryItems = await tx.inventoryitem.findMany({
      where: whereCondition,
      include: {
        booksku: {
          include: {
            bookmaster: true,
          },
        },
      },
      skip,
      take,
    });

    return {
      data: inventoryItems,
      meta: {
        totalItems: totalCount,
        totalPages: Math.ceil(totalCount / limit),
        currentPage: page,
        itemsPerPage: limit,
      },
    };
  });
}

// NEW: Function to get a single book by its inventory item ID
export async function getBookById(id: number) {
  return prisma.inventoryitem.findUnique({
    where: { id },
    include: {
      booksku: {
        include: {
          bookmaster: true,
        },
      },
    },
  });
}


================================================================================
### FILE: bookworm-backend\src\services\orderService.ts
================================================================================

// src/services/orderService.ts (fully replaced)
import { Prisma } from '@prisma/client';
import { randomBytes } from 'crypto';
import * as crypto from 'crypto';
const WechatPay = require('wechatpay-node-v3');
import config from '../config';
import prisma from '../db';
import { ApiError } from '../errors';

// 通用的事务重试辅助函数
async function withTxRetry<T>(fn: () => Promise<T>): Promise<T> {
  for (let i = 0; i < 3; i++) {
    try {
      return await fn();
    } catch (e: any) {
      // 检查是否为 Prisma 的序列化失败
      if (e.code === 'P2034' || e.message?.includes('could not serialize')) {
        // 指数退避+抖动等待
        await new Promise(r => setTimeout(r, 20 * Math.pow(2, i) + Math.random() * 40));
        continue;
      }
      // 非可重试错误，立即抛出
      throw e;
    }
  }
  // 重试3次后仍失败
  throw new ApiError(409, '系统繁忙，请稍后重试', 'TX_RETRY_EXCEEDED');
}

export async function createOrder(input: { userId: number; inventoryItemIds: number[] }) {
    return withTxRetry(() => prisma.$transaction(async (tx) => {
        const itemIds = Array.from(new Set(input.inventoryItemIds));
        if (itemIds.length === 0) {
            throw new ApiError(400, '没有选择任何书籍', 'EMPTY_ITEMS');
        }

        // 1. 原子抢占：尝试将 'in_stock' 状态更新为 'reserved'
        const updateResult = await tx.inventoryitem.updateMany({
            where: {
                id: { in: itemIds },
                status: 'in_stock'
            },
            data: { status: 'reserved' }
        });

        // 2. 检查结果：如果更新的行数不等于请求的物品数量，说明有物品被别人抢先了
        if (updateResult.count !== itemIds.length) {
            // 事务会自动回滚所有更改，所以我们只需要抛出错误
            throw new ApiError(409, '部分书籍已被抢购，请重新下单', 'INSUFFICIENT_INVENTORY');
        }

        // 3. 读取已成功抢占的物品信息，用于计算总价
        const reservedItems = await tx.inventoryitem.findMany({
            where: { id: { in: itemIds } }
        });

        const totalAmount = reservedItems.reduce(
            (sum, item) => sum.add(new Prisma.Decimal(item.selling_price)),
            new Prisma.Decimal(0)
        );

        // 4. 创建订单（包含 pickup_code 重试逻辑）
        let order;
        for (let attempt = 0; attempt < 5; attempt++) {
            const pickup_code = crypto.randomBytes(5).toString('hex').toUpperCase().substring(0, 8);
            try {
                order = await tx.order.create({
                    data: {
                        user_id: input.userId,
                        status: 'PENDING_PAYMENT',
                        total_amount: totalAmount,
                        pickup_code,
                        paymentExpiresAt: new Date(Date.now() + 15 * 60 * 1000), // 15分钟后过期
                    },
                });
                break; // 成功创建订单，跳出循环
            } catch (e: any) {
                // 检查是否为 pickup_code 唯一约束冲突
                if (e.code === 'P2002' && e.meta?.target?.includes('pickup_code')) {
                    continue; // 重试生成新的 pickup_code
                }
                // 其他错误直接抛出
                throw e;
            }
        }
        
        // 如果5次重试后仍无法生成唯一的 pickup_code
        if (!order) {
            throw new ApiError(500, '无法生成唯一订单取货码', 'PICKUP_CODE_GEN_FAILED');
        }

        // 5. 创建订单项
        await tx.orderitem.createMany({
            data: reservedItems.map(item => ({
                order_id: order.id,
                inventory_item_id: item.id,
                price: item.selling_price,
            })),
        });

        return order;
    }, {
        isolationLevel: Prisma.TransactionIsolationLevel.Serializable, // 使用最高隔离级别保证一致性
    }));
}

export async function getOrdersByUserId(userId: number, options: { page?: number; limit?: number } = {}) {
  const { page = 1, limit = 10 } = options;

  // Calculate pagination parameters
  const take = limit;
  const skip = (page - 1) * limit;

  return prisma.$transaction(async (tx) => {
    // First query: Get total count for pagination metadata
    const totalCount = await tx.order.count({
      where: { user_id: userId },
    });

    // Second query: Get current page data
    const orders = await tx.order.findMany({
      where: { user_id: userId },
      include: { orderitem: { include: { inventoryitem: { include: { booksku: { include: { bookmaster: true } } } } } } },
      orderBy: { createdAt: 'desc' },
      skip,
      take,
    });

    return {
      data: orders,
      meta: {
        totalItems: totalCount,
        totalPages: Math.ceil(totalCount / limit),
        currentPage: page,
        itemsPerPage: limit,
      },
    };
  });
}

// NEW: Function to fulfill an order
export async function fulfillOrder(pickupCode: string) {
  return prisma.$transaction(async (tx) => {
    // 1. Find the order by its unique pickup code.
    const order = await tx.order.findUnique({
      where: { pickup_code: pickupCode },
      include: { orderitem: true }, // Include items to update their status
    });

    // 2. Validate
    if (!order) {
      throw new ApiError(404, `取货码 "${pickupCode}" 无效`, 'INVALID_PICKUP_CODE');
    }
    if (order.status !== 'PENDING_PICKUP') {
      throw new ApiError(409, `此订单状态为 "${order.status}"，无法核销。订单必须已支付才能核销。`, 'ORDER_STATE_INVALID');
    }

    // 3. Update the Order status
    const updatedOrder = await tx.order.update({
      where: { id: order.id },
      data: {
        status: 'COMPLETED',
        completed_at: new Date(),
      },
    });

    // 4. Update the InventoryItem statuses
    const inventoryItemIds = order.orderitem.map(item => item.inventory_item_id);
    await tx.inventoryitem.updateMany({
      where: { id: { in: inventoryItemIds } },
      data: { status: 'sold' },
    });

    return updatedOrder;
  });
}

export async function generatePaymentParams(pay: any, orderId: number, userId: number) {
    return prisma.$transaction(async (tx) => {
        const order = await tx.order.findUniqueOrThrow({ where: { id: orderId } });
        if (order.user_id !== userId) throw new ApiError(403, '无权支付此订单', 'FORBIDDEN');
        if (order.status !== 'PENDING_PAYMENT') throw new ApiError(409, '订单状态不正确', 'ORDER_STATE_INVALID');

        const user = await tx.user.findUniqueOrThrow({ where: { id: userId }, select: { openid: true } });
        
        // 创建或查找 PaymentRecord，使用精确的金额计算
        const amount_total = new Prisma.Decimal(order.total_amount).mul(100).toDecimalPlaces(0).toNumber();
        const out_trade_no = `BOOKWORM_${order.id}`;
        
        const paymentRecord = await tx.paymentRecord.upsert({
            where: { out_trade_no },
            create: {
                out_trade_no,
                order_id: order.id,
                status: 'PENDING',
                amount_total,
                appid: config.wxAppId,
                mchid: config.wxPayMchId
            },
            update: {}
        });
        
        const orderItems = await tx.orderitem.findMany({ 
            where: { order_id: orderId },
            include: { inventoryitem: { include: { booksku: { include: { bookmaster: true } } } } }
        });
        const titles = orderItems.map(i => i.inventoryitem.booksku.bookmaster.title);
        const description = titles.slice(0, 3).join('、') + (titles.length > 3 ? `等${titles.length}本书籍` : '');

        const unifiedOrderResult = await pay.transactions_jsapi({
            appid: config.wxAppId!,
            mchid: config.wxPayMchId!,
            description,
            out_trade_no,
            notify_url: config.wxPayNotifyUrl!,
            time_expire: new Date(order.paymentExpiresAt).toISOString(),
            amount: { total: amount_total, currency: 'CNY' },
            payer: { openid: user.openid }
        });

        const { prepay_id } = unifiedOrderResult as any;
        if (!prepay_id) throw new ApiError(500, '微信下单失败，未返回prepay_id', 'WECHAT_PAY_ERROR');
        
        const timeStamp = Math.floor(Date.now() / 1000).toString();
        const nonceStr = crypto.randomBytes(16).toString('hex');
        const pkg = `prepay_id=${prepay_id}`;
        const toSign = `${config.wxAppId}\n${timeStamp}\n${nonceStr}\n${pkg}\n`;

        const paySign = pay.sign(toSign);

        return { timeStamp, nonceStr, package: pkg, signType: 'RSA', paySign };
    });
}

// NEW: Process WeChat Pay payment notification with strict idempotency
export async function processPaymentNotification(notificationData: any) {
  return prisma.$transaction(async (tx) => {
    const { 
      out_trade_no, 
      transaction_id, 
      trade_state, 
      amount, 
      payer, 
      mchid, 
      appid 
    } = notificationData;
    
    // 1. 幂等性检查 (第一道防线)
    const paymentRecord = await tx.paymentRecord.findUnique({
      where: { out_trade_no },
      include: { Order: true }
    });
    
    if (!paymentRecord || paymentRecord.status === 'SUCCESS') {
      console.log(`Payment notification for ${out_trade_no} already processed or unknown. Skipping.`);
      return paymentRecord;
    }
    
    // 2. 数据校验 (第二道防线)
    if (mchid && mchid !== config.wxPayMchId) {
      throw new ApiError(400, `商户号不匹配。期望：${config.wxPayMchId}，实际：${mchid}`, 'MCHID_MISMATCH');
    }
    
    if (appid && appid !== config.wxAppId) {
      throw new ApiError(400, `应用ID不匹配。期望：${config.wxAppId}，实际：${appid}`, 'APPID_MISMATCH');
    }
    
    if (amount.total !== paymentRecord.amount_total) {
      throw new ApiError(400, `金额不匹配。期望：${paymentRecord.amount_total}，实际：${amount.total}`, 'AMOUNT_MISMATCH');
    }
    
    // 3. 验证支付状态
    if (trade_state !== 'SUCCESS') {
      console.log(`Payment for ${out_trade_no} failed with state: ${trade_state}`);
      // 可以选择更新 PaymentRecord 状态为 FAILED
      return null;
    }
    
    // 4. 核心状态更新
    const updatedPaymentRecord = await tx.paymentRecord.update({
      where: { out_trade_no },
      data: {
        status: 'SUCCESS',
        transaction_id,
        payer_openid: payer?.openid,
        notified_at: new Date()
      }
    });
    
    // 5. 关联订单状态处理
    const order = paymentRecord.Order;
    
    // 处理"迟到支付"
    if (order.status === 'CANCELLED') {
      await tx.paymentRecord.update({
        where: { out_trade_no },
        data: { status: 'REFUND_REQUIRED' }
      });
      console.error(`CRITICAL: Payment succeeded for cancelled order ${order.id}. Marked for refund.`);
      return updatedPaymentRecord;
    }
    
    // 处理正常支付
    if (order.status === 'PENDING_PAYMENT') {
      await tx.order.update({
        where: { id: order.id },
        data: {
          status: 'PENDING_PICKUP',
          paid_at: new Date()
        }
      });
      console.log(`Order ${order.id} successfully marked as paid`);
      return updatedPaymentRecord;
    }
    
    // 其他状态的警告处理
    console.warn(`Payment notification for order ${order.id} with unexpected status: ${order.status}`);
    return updatedPaymentRecord;
  });
}

export async function getPendingPickupOrders() {
  // Linus式方案：分离查询，手动聚合，消除N+1
  
  // 1. 获取所有待取货订单及其orderitem（一层include）
  const ordersWithItems = await prisma.order.findMany({
    where: { status: 'PENDING_PICKUP' },
    include: {
      orderitem: true, // 只include一层，避免深层嵌套
    },
    orderBy: { paid_at: 'asc' },
  });

  // 2. 提取所有inventory_item_id
  const inventoryItemIds = ordersWithItems.flatMap(o => 
    o.orderitem.map(item => item.inventory_item_id)
  );

  // 如果没有订单，直接返回空数组
  if (inventoryItemIds.length === 0) {
    return [];
  }

  // 3. 一次性查询所有相关的inventory数据
  const inventoryItems = await prisma.inventoryitem.findMany({
    where: {
      id: { in: inventoryItemIds },
    },
    include: {
      booksku: {
        include: {
          bookmaster: true,
        },
      },
    },
  });

  // 4. 创建inventory数据的快速查找Map
  const inventoryMap = new Map(
    inventoryItems.map(item => [item.id, item])
  );

  // 5. 手动聚合数据：将完整的inventory信息附加到每个orderitem上
  const enrichedOrders = ordersWithItems.map(order => ({
    ...order,
    orderitem: order.orderitem.map(item => ({
      ...item,
      inventoryitem: inventoryMap.get(item.inventory_item_id)!,
    })),
  }));

  return enrichedOrders;
}

export async function cancelExpiredOrders() {
  return prisma.$transaction(async (tx) => {
    // 1. Find all orders that are pending payment and have expired.
    const expiredOrders = await tx.order.findMany({
      where: {
        status: 'PENDING_PAYMENT',
        paymentExpiresAt: {
          lt: new Date(), // Less than the current time
        },
      },
      select: {
        id: true,
      },
    });

    if (expiredOrders.length === 0) {
      return { cancelledCount: 0 }; // Nothing to do
    }

    const expiredOrderIds = expiredOrders.map(o => o.id);
    console.log(`Found ${expiredOrderIds.length} expired orders to cancel:`, expiredOrderIds);

    // 2. Find all inventory items linked to these expired orders.
    const itemsToRelease = await tx.orderitem.findMany({
      where: {
        order_id: {
          in: expiredOrderIds,
        },
      },
      select: {
        inventory_item_id: true,
      },
    });

    const inventoryItemIdsToRelease = itemsToRelease.map(i => i.inventory_item_id);

    // 3. Update the orders' status to CANCELLED.
    await tx.order.updateMany({
      where: {
        id: {
          in: expiredOrderIds,
        },
      },
      data: {
        status: 'CANCELLED',
        cancelled_at: new Date(),
      },
    });

    // 4. Update the inventory items' status back to in_stock.
    if (inventoryItemIdsToRelease.length > 0) {
      await tx.inventoryitem.updateMany({
        where: {
          id: {
            in: inventoryItemIdsToRelease,
          },
        },
        data: {
          status: 'in_stock',
          updated_at: new Date(),
        },
      });
    }
    
    console.log(`Cancelled ${expiredOrderIds.length} orders and released ${inventoryItemIdsToRelease.length} items back to stock.`);
    return { cancelledCount: expiredOrderIds.length };
  });
}

export async function getOrderById(orderId: number) {
  return prisma.order.findUniqueOrThrow({
    where: { id: orderId },
    include: {
      orderitem: {
        include: {
          inventoryitem: {
            include: {
              booksku: {
                include: {
                  bookmaster: true
                }
              }
            }
          }
        }
      }
    }
  });
}


================================================================================
### FILE: miniprogram\app.js
================================================================================

// miniprogram/app.js
const auth = require('./utils/auth');

App({
  onLaunch() {
    auth.login()
      .then(res => {
        console.log('Login successful', res);
        this.checkTermsAgreement();
      })
      .catch(err => {
        console.error('Login failed on launch', err);
      });
  },

  checkTermsAgreement() {
    const hasAgreed = wx.getStorageSync('hasAgreedToTerms');
    if (!hasAgreed) {
      wx.showModal({
        title: '服务协议与隐私政策',
        content: '欢迎使用！为了保障您的权益，请在使用前仔细阅读并同意我们的《用户服务协议》与《隐私政策》。您可以在"我的-设置"中随时查看。',
        confirmText: '同意',
        cancelText: '拒绝',
        success: (res) => {
          if (res.confirm) {
            wx.setStorageSync('hasAgreedToTerms', true);
          } else if (res.cancel) {
            // 用户拒绝，可以引导退出或提示无法使用
            wx.showToast({
              title: '您需要同意协议才能使用本服务',
              icon: 'none',
              duration: 3000
            });
            // 简单处理，可以让用户无法进行核心操作
          }
        }
      });
    }
  },

  // 增加一个全局方法，方便其他页面调用
  showTerms() {
    wx.showModal({
      title: '服务协议与隐私政策',
      content: '这里是完整的《用户服务协议》与《隐私政策》内容...（此处应从服务器获取或本地预置长文本）',
      showCancel: false,
      confirmText: '我已知晓',
    });
  }
});


================================================================================
### FILE: miniprogram\config.js
================================================================================

// miniprogram/config.js
const config = {
  // 当前网络配置 - WLAN IP: 172.20.10.4
  // 如果使用模拟器开发，可改为 'http://localhost:3000/api'
  // 如果使用真机调试，使用当前的内网IP
  apiBaseUrl: 'http://172.20.10.4:3000/api'
};

module.exports = config;


================================================================================
### FILE: miniprogram\pages\book-detail\index.js
================================================================================

// pages/book-detail/index.js
const auth = require('../../utils/auth');
const { request } = require('../../utils/api');

Page({
  data: {
    bookDetail: null,
    isLoading: true,
    error: null,
  },

  onLoad(options) {
    if (options.id) {
      this.fetchBookDetails(options.id);
    } else {
      this.setData({ error: '无效的书籍ID', isLoading: false });
    }
  },

  async fetchBookDetails(id) {
    this.setData({ isLoading: true, error: null });
    try {
      const data = await request({
        url: `/inventory/item/${id}`,
        method: 'GET'
      });
      this.setData({ bookDetail: data });
    } catch (error) {
      console.error('API request failed', error);
      this.setData({ error: error.error || '加载失败' });
      wx.showToast({
        title: error.error || '加载失败',
        icon: 'none'
      });
    } finally {
      this.setData({ isLoading: false });
    }
  },

  handleBuyNow() {
    const inventoryItemId = this.data.bookDetail.id;
    wx.navigateTo({
      url: `/pages/order-confirm/index?id=${inventoryItemId}`,
    });
  }
});


================================================================================
### FILE: miniprogram\pages\customer-service\index.js
================================================================================

Page({
  data: {
    customerServiceWechat: 'bookworm_service'
  },

  onLoad() {
    wx.setNavigationBarTitle({
      title: '联系客服与帮助'
    });
  },

  // 复制微信号
  copyWechatId() {
    wx.setClipboardData({
      data: this.data.customerServiceWechat,
      success: () => {
        wx.showToast({
          title: '已复制',
          icon: 'success',
          duration: 2000
        });
      },
      fail: () => {
        wx.showToast({
          title: '复制失败',
          icon: 'none',
          duration: 2000
        });
      }
    });
  }
});


================================================================================
### FILE: miniprogram\pages\market\index.js
================================================================================

// pages/market/index.js
const auth = require('../../utils/auth');
const { request } = require('../../utils/api');

Page({
  data: {
    bookList: [],
    isLoading: true,
    error: null,
    searchTerm: '',
    searchPerformed: false, // To show different empty state messages
    pageInfo: null // For pagination metadata
  },

  onLoad(options) {
    this.fetchAvailableBooks();
  },

  // MODIFIED: fetchAvailableBooks now takes a search term
  async fetchAvailableBooks() {
    this.setData({ isLoading: true, error: null });
    let url = `/inventory/available`;
    if (this.data.searchTerm) {
      url += `?search=${encodeURIComponent(this.data.searchTerm)}`;
    }

    try {
      const data = await request({
        url: url,
        method: 'GET'
      });
      this.setData({ bookList: data.data, pageInfo: data.meta });
    } catch (error) {
      console.error('API request failed', error);
      this.setData({ 
        error: error.error || '加载失败', 
        bookList: [] 
      });
      wx.showToast({
        title: error.error || '加载失败',
        icon: 'none'
      });
    } finally {
      this.setData({ isLoading: false });
    }
  },

  // NEW: Handle input change
  handleInput(e) {
    this.setData({
      searchTerm: e.detail.value
    });
  },

  // NEW: Handle search button tap or keyboard confirm
  handleSearch() {
    this.setData({ searchPerformed: true });
    this.fetchAvailableBooks();
  },

  // Pull down refresh
  async onPullDownRefresh() {
    await this.fetchAvailableBooks();
    wx.stopPullDownRefresh();
  }
});


================================================================================
### FILE: miniprogram\pages\order-confirm\index.js
================================================================================

// pages/order-confirm/index.js
const auth = require('../../utils/auth');
const api = require('../../utils/api');

function promisifiedPayment(options) {
  return new Promise((resolve, reject) => {
    wx.requestPayment({
      ...options,
      success: resolve,
      fail: reject
    });
  });
}

Page({
  data: {
    book: null,
    isLoading: true,
    error: null,
    isSubmitting: false
  },
  
  onLoad(options) {
    if (options.id) {
      this.fetchBookDetails(options.id);
    } else {
      this.setData({ isLoading: false, error: '无效的商品ID' });
    }
  },

  async fetchBookDetails(id) {
    this.setData({ isLoading: true, error: null });
    
    try {
      const data = await api.request({
        url: `/inventory/item/${id}`,
        method: 'GET'
      });
      
      if (data.status === 'in_stock') {
        this.setData({ book: data });
      } else {
        this.setData({ error: '该书籍已售出或不可用' });
      }
    } catch (error) {
      this.setData({ error: error.error || '网络请求失败，无法获取书籍信息' });
    } finally {
      this.setData({ isLoading: false });
    }
  },
  
  async handlePayment() {
    if (this.data.isSubmitting || !this.data.book) return;
    this.setData({ isSubmitting: true });

    const userId = auth.getUserId();
    const inventoryItemId = this.data.book.id;

    if (!userId) {
      wx.showToast({ title: '登录信息失效，请重启小程序', icon: 'none' });
      this.setData({ isSubmitting: false });
      return;
    }

    try {
      wx.showLoading({ title: '正在创建订单...' });

      const createData = await api.request({
        url: '/orders/create',
        method: 'POST',
        data: { inventoryItemIds: [inventoryItemId] }
      });

      const orderId = createData.id;
      wx.showLoading({ title: '获取支付参数...' });

      const payParams = await api.request({
        url: `/orders/${orderId}/pay`,
        method: 'POST' // body为空，所有信息都在JWT里
      });

      wx.hideLoading();

      try {
        await promisifiedPayment(payParams); // 直接使用后端返回的签名参数
        wx.showToast({ title: '支付成功', icon: 'success' });
        setTimeout(() => {
          wx.switchTab({ url: '/pages/orders/index' });
        }, 1500);
      } catch (paymentError) {
        wx.showToast({ title: '支付已取消', icon: 'none' });
        this.setData({ isSubmitting: false });
      }

    } catch (error) {
      wx.hideLoading();
      wx.showToast({ title: error.error || '网络请求失败', icon: 'error' });
      this.setData({ isSubmitting: false });
    }
  }
});


================================================================================
### FILE: miniprogram\pages\order-detail\index.js
================================================================================

// pages/order-detail/index.js
const { request } = require('../../utils/api');

Page({
  data: {
    order: null,
    isLoading: true,
    error: null
  },

  onLoad(options) {
    if (options.id) {
      this.fetchOrderDetail(options.id);
    } else {
      this.setData({ 
        isLoading: false, 
        error: '无效的订单ID' 
      });
    }
  },

  async fetchOrderDetail(orderId) {
    this.setData({ isLoading: true, error: null });

    try {
      const data = await request({
        url: `/orders/${orderId}`,
        method: 'GET'
      });
      this.setData({ 
        order: data,
        isLoading: false 
      });
    } catch (error) {
      this.setData({ 
        error: error.error || '获取订单详情失败',
        isLoading: false 
      });
    }
  },

  formatDate(dateString) {
    if (!dateString) return '';
    const date = new Date(dateString);
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    const hours = String(date.getHours()).padStart(2, '0');
    const minutes = String(date.getMinutes()).padStart(2, '0');
    return `${year}-${month}-${day} ${hours}:${minutes}`;
  },

  getStatusText(status) {
    const statusMap = {
      'PENDING_PAYMENT': '待支付',
      'PENDING_PICKUP': '待取货', 
      'COMPLETED': '已完成',
      'CANCELLED': '已取消',
      'RETURNED': '已退货'
    };
    return statusMap[status] || status;
  },

  getConditionText(condition) {
    const conditionMap = {
      'A': '全新',
      'B': '八成新',
      'C': '六成新'
    };
    return conditionMap[condition] || condition;
  },

  onRefresh() {
    const pages = getCurrentPages();
    const currentPage = pages[pages.length - 1];
    const orderId = currentPage.options.id;
    if (orderId) {
      this.fetchOrderDetail(orderId);
    }
  },

  copyPickupCode(e) {
    const code = e.target.dataset.code || e.currentTarget.dataset.code;
    if (code) {
      wx.setClipboardData({
        data: code,
        success: () => {
          wx.showToast({
            title: '取货码已复制',
            icon: 'success'
          });
        }
      });
    }
  }
});


================================================================================
### FILE: miniprogram\pages\orders\index.js
================================================================================

// pages/orders/index.js
const auth = require('../../utils/auth');
const { request } = require('../../utils/api');
const { ORDER_STATUS } = require('../../utils/constants');

Page({
  data: {
    orderList: [],
    isLoading: true,
    error: null,
    statusMap: ORDER_STATUS,
    pageInfo: null // For pagination metadata
  },
  onShow() { this.fetchUserOrders(); },
  navigateToDetail(event) {
    const orderId = event.currentTarget.dataset.orderId;
    if (orderId) {
      wx.navigateTo({
        url: `/pages/order-detail/index?id=${orderId}`
      });
    }
  },
  async fetchUserOrders() {
    const userId = auth.getUserId();
    if (!userId) { return; }
    this.setData({ isLoading: true, error: null });
    
    try {
      const data = await request({
        url: `/orders/user/${userId}`,
        method: 'GET'
      });
      this.setData({ orderList: data.data, pageInfo: data.meta });
    } catch (error) {
      this.setData({ error: error.error || '加载订单失败。' });
    } finally {
      this.setData({ isLoading: false });
    }
  },

  // Pull down refresh
  async onPullDownRefresh() {
    await this.fetchUserOrders();
    wx.stopPullDownRefresh();
  }
});


================================================================================
### FILE: miniprogram\pages\profile\index.js
================================================================================

// miniprogram/pages/profile/index.js
const app = getApp(); // 获取App实例

Page({
  data: {
    userInfo: { nickName: '微信用户' },
    serviceInfo: {
      wechatId: 'your_service_wechat_id',
      time: '工作日 9:00 - 18:00'
    }
  },
  copyWechatId() {
    wx.setClipboardData({
      data: this.data.serviceInfo.wechatId,
      success: () => { wx.showToast({ title: '已复制' }); }
    });
  },

  showTerms() {
    wx.navigateTo({
      url: '/pages/webview/index?slug=terms-of-service'
    });
  },

  showPrivacy() {
    wx.navigateTo({
      url: '/pages/webview/index?slug=privacy-policy'
    });
  },

  goToCustomerService() {
    wx.navigateTo({
      url: '/pages/customer-service/index'
    });
  },

  onShareAppMessage() {
    return {
      title: '超值的二手教材，快来看看吧！',
      path: '/pages/market/index',
    }
  }
});


================================================================================
### FILE: miniprogram\pages\webview\index.js
================================================================================

const { request } = require('../../utils/api');

Page({
  data: {
    content: null,
    isLoading: true,
    errorMsg: ''
  },

  onLoad(options) {
    const { slug } = options;
    if (!slug) {
      this.setData({
        isLoading: false,
        errorMsg: '页面参数错误'
      });
      return;
    }

    this.loadContent(slug);
  },

  async loadContent(slug) {
    try {
      const data = await request({
        url: `/content/${slug}`,
        method: 'GET'
      });
      const { title, body } = data;
      wx.setNavigationBarTitle({ title });
      this.setData({
        content: { title, body },
        isLoading: false
      });
    } catch (error) {
      console.error('Content load failed', error);
      this.setData({
        isLoading: false,
        errorMsg: error.error || '内容加载失败'
      });
    }
  }
});


================================================================================
### FILE: miniprogram\utils\api.js
================================================================================

// miniprogram/utils/api.js - 统一的API请求工具
const config = require('../config');
const tokenUtil = require('./token'); // 依赖新的、无依赖的模块

/**
 * 统一的API请求函数
 * @param {Object} options - 请求参数
 * @param {string} options.url - 请求地址（相对路径，会自动拼接baseURL）
 * @param {string} options.method - 请求方法（GET, POST等）
 * @param {Object} options.data - 请求数据
 * @param {Object} options.header - 请求头
 * @returns {Promise} - 返回Promise对象
 */
const request = ({ url, method = 'GET', data = {} }) => new Promise((resolve, reject) => {
    const token = tokenUtil.getToken(); // 从新模块获取token
    wx.request({
        url: `${config.apiBaseUrl}${url}`,
        method,
        data,
        header: {
            'Content-Type': 'application/json',
            'Authorization': token ? `Bearer ${token}` : ''
        },
        success: (res) => {
            if (res.statusCode >= 200 && res.statusCode < 300) return resolve(res.data);
            if (res.statusCode === 401) {
                // 简单处理：提示并让用户重启
                wx.showToast({ title: '登录过期，请重启小程序', icon: 'none' });
                tokenUtil.clearToken();
            }
            return reject(res.data || { error: `Request failed with status ${res.statusCode}` });
        },
        fail: (err) => reject({ error: '网络请求失败', errorCode: 'NETWORK_ERROR' })
    });
});

module.exports = {
  request
};


================================================================================
### FILE: miniprogram\utils\auth.js
================================================================================

// miniprogram/utils/auth.js
const { request } = require('./api');
const tokenUtil = require('./token'); // 引入新的token模块

const login = () => {
  return new Promise((resolve, reject) => {
    wx.login({
      success: async (res) => {
        if (res.code) {
          try {
            const data = await request({
              url: '/auth/login',
              method: 'POST',
              data: { code: res.code }
            });
            
            if (data.token) {
              tokenUtil.setToken(data.token); // 使用新模块
              tokenUtil.setUserId(data.userId); // 使用新模块
              resolve(data);
            } else {
              reject(new Error('Login failed on server.'));
            }
          } catch (error) {
            reject(new Error(error.error || 'Login failed on server.'));
          }
        } else {
          reject(new Error('wx.login failed, no code returned.'));
        }
      },
      fail: (err) => { reject(err); }
    });
  });
};

const logout = () => {
  tokenUtil.clearToken(); // 使用新模块
};

module.exports = {
  login,
  getUserId: tokenUtil.getUserId, // 直接导出
  logout
};


================================================================================
ESSENTIAL CODE REVIEW REPORT GENERATION COMPLETE.
================================================================================
