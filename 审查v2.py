#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Bookworm È°πÁõÆ‰ª£Á†ÅÂÆ°Êü•ÁîüÊàêÂô® v2 - LinusÂºèÈáçÊûÑÁâà
Âü∫‰∫é‰ºòÂÖàÁ∫ßÂàÜÂ±ÇÁöÑÁôΩÂêçÂçïÁ≠ñÁï•ÔºåÊúÄÂ§ßÂåñ‰ø°Âô™ÊØî„ÄÇ

Âì≤Â≠¶Ôºö
- Good Taste: ÁÆÄÂçïÁöÑÊï∞ÊçÆÁªìÊûÑ ‚Üí ÁÆÄÂçïÁöÑ‰ª£Á†Å
- ÁôΩÂêçÂçïÁ≠ñÁï•ÔºöÊòéÁ°ÆÁü•ÈÅìË¶Å‰ªÄ‰πàÔºåËÄå‰∏çÊòØÁåúÊµãË¶ÅÊéíÈô§‰ªÄ‰πà
- ÂàÜÂ±Ç‰ºòÂÖàÁ∫ßÔºöP0(Ê†∏ÂøÉ) > P1(ÈáçË¶Å) > P2(ÊñáÊ°£) > GARBAGE(ÂûÉÂúæ)

‰ΩøÁî®ÊñπÊ≥ï:
    python ÂÆ°Êü•v2.py

ËæìÂá∫:
    bookworm_code_review_v2.txt
"""

import os
import datetime
import fnmatch

# ==============================================================================
# ‰ºòÂÖàÁ∫ßÂàÜÂ±Ç - Êï∞ÊçÆÁªìÊûÑÂç≥Ê≥ïÂæã
# ==============================================================================

# === P0: ÁªùÂØπÊ†∏ÂøÉÔºàÂøÖÈ°ªÂåÖÂê´Ôºâ- ‰∏öÂä°ÈÄªËæëÂíåÊû∂ÊûÑÂü∫Áü≥ ===
P0_CRITICAL_FILES = [
    'CLAUDE.md',  # AIÊìç‰ΩúÊâãÂÜå
    'bookworm-backend/prisma/schema.prisma',  # Êï∞ÊçÆÁúüÁõ∏
    'bookworm-backend/src/config.ts',  # Á≥ªÁªüÈÖçÁΩÆ
    'bookworm-backend/src/errors.ts',  # ÈîôËØØÂÆö‰πâ
    'bookworm-backend/src/db.ts',  # Êï∞ÊçÆÂ∫ìËøûÊé•
    'bookworm-backend/src/index.ts',  # Â∫îÁî®ÂÖ•Âè£
    'bookworm-backend/src/app-factory.ts',  # Â∫îÁî®Â∑•ÂéÇ
    'bookworm-backend/src/constants.ts',  # ‰∏öÂä°Â∏∏Èáè
]

P0_CRITICAL_PATTERNS = [
    'bookworm-backend/src/services/*.ts',  # ‰∏öÂä°ÈÄªËæëÊ†∏ÂøÉ
    'bookworm-backend/src/routes/*.ts',  # APIË∑ØÁî±ÂÆö‰πâ
    'bookworm-backend/src/adapters/*.ts',  # Â§ñÈÉ®ÈõÜÊàêÈÄÇÈÖçÂô®
    'bookworm-backend/src/utils/*.ts',  # Â∑•ÂÖ∑ÂáΩÊï∞
]

# === P1: ÈáçË¶Å‰∏ä‰∏ãÊñáÔºàÂº∫ÁÉàÂª∫ËÆÆÂåÖÂê´Ôºâ- ÁêÜËß£Á≥ªÁªüËøêË°åÊú∫Âà∂ ===
P1_IMPORTANT_PATTERNS = [
    'bookworm-backend/src/plugins/*.ts',  # FastifyÊèí‰ª∂
    'bookworm-backend/src/jobs/*.ts',  # ÂÆöÊó∂‰ªªÂä°
    'bookworm-backend/src/types/*.ts',  # Á±ªÂûãÂÆö‰πâ
    'miniprogram/app.js',  # Â∞èÁ®ãÂ∫èÂÖ•Âè£
    'miniprogram/app.json',  # Â∞èÁ®ãÂ∫èÈÖçÁΩÆ
    'miniprogram/config.js',  # ÂâçÁ´ØÈÖçÁΩÆ
    'miniprogram/pages/*/index.js',  # È°µÈù¢ÈÄªËæë
    'miniprogram/utils/*.js',  # ÂâçÁ´ØÂ∑•ÂÖ∑ÂáΩÊï∞
    'miniprogram/components/*/*.js',  # ÁªÑ‰ª∂
]

P1_IMPORTANT_FILES = [
    'bookworm-backend/package.json',  # ‰æùËµñÂÖ≥Á≥ªÔºàÊ≥®ÊÑè‰∏çÊòØlockÊñá‰ª∂Ôºâ
    'bookworm-backend/eslint.config.js',  # ‰ª£Á†ÅËßÑËåÉ
    'bookworm-backend/tsconfig.json',  # TypeScriptÈÖçÁΩÆ
    'miniprogram/app.json',  # Â∞èÁ®ãÂ∫èÈÖçÁΩÆ
]

# === P2: Ë°•ÂÖÖÊñáÊ°£ÔºàÂèØÈÄâ‰ΩÜÊúâ‰ª∑ÂÄºÔºâ- Êèê‰æõÈ´òÂ±ÇËßÜËßíÂíåÁ§∫‰æã ===
P2_DOCUMENTATION = [
    'README.md',
    'AGENTS.md',
    'RECOMMENDATION_SETUP.md',
    'bookworm-backend/README.md',
    'bookworm-backend/RECOMMENDATIONS_API.md',
    # Á≤æÈÄâÁöÑÈõÜÊàêÊµãËØï - ‰Ωú‰∏∫APIË°å‰∏∫ÁöÑÂèØÊâßË°åÊñáÊ°£
    'bookworm-backend/src/tests/order.integration.test.ts',
    'bookworm-backend/src/tests/concurrent-order-control.integration.test.ts',
    'bookworm-backend/src/tests/paymentSecurity.integration.test.ts',
    'bookworm-backend/src/tests/user-merge.integration.test.ts',
    'bookworm-backend/src/tests/sell-orders.integration.test.ts',
    # ÊµãËØïÂü∫Á°ÄËÆæÊñΩ - ÁêÜËß£ÊµãËØïÂ¶Ç‰ΩïËøêË°å
    'bookworm-backend/src/tests/globalSetup.ts',
    'bookworm-backend/src/tests/integrationSetup.ts',
    'bookworm-backend/src/tests/database-integration-setup.ts',
    # ÊµãËØïÂ∑•ÂÖ∑
    'bookworm-backend/src/tests/test-helpers/*.ts',
    # Claude CodeËá™ÂÆö‰πâÂëΩ‰ª§
    '.claude/commands/**/*.md',
    '.claude/settings.local.json',
]

# === GARBAGE: ÁªùÂØπÊéíÈô§ - Âô™Èü≥ÂíåËá™Âä®ÁîüÊàêÂÜÖÂÆπ ===
ABSOLUTE_GARBAGE = [
    # ÈîÅÊñá‰ª∂ÔºàËá™Âä®ÁîüÊàêÔºåÈõ∂‰∏öÂä°‰ª∑ÂÄºÔºâ
    '**/package-lock.json',
    '**/yarn.lock',
    '**/pnpm-lock.yaml',

    # Êï∞ÊçÆÂ∫ìËøÅÁßªÂéÜÂè≤ÔºàÊúâschema.prismaÂ∞±Â§ü‰∫ÜÔºâ
    '**/migrations/**/*.sql',
    '**/migrations/**/migration.sql',
    'bookworm-backend/prisma/migrations/**',

    # ËøêÁª¥ÂíåÊµãËØïÂ∑•ÂÖ∑Ôºà‰∏çÊòØÊ†∏ÂøÉ‰ª£Á†ÅÔºâ
    '**/load-test*.js',
    '**/load-test*.ts',
    'fix_*.py',
    'update_*.js',
    'seed-*.sql',
    'upgrade-*.ts',
    'upgrade-*.sql',
    '**/generate-load*.js',
    '**/generate-load*.ts',

    # ËÑöÊú¨Ëá™Ë∫´
    'ÂÆ°Êü•*.py',

    # Êú¨Âú∞ÈÖçÁΩÆÂíåÁßÅÊúâÊñá‰ª∂
    '**/project.private.config.json',
    '**/.env.local',
    '**/.env.*.local',

    # ÈÉ®ÁΩ≤ÈÖçÁΩÆÔºàÈô§ÈùûÈúÄË¶ÅÁêÜËß£Âü∫Á°ÄËÆæÊñΩÔºâ
    'docker-compose*.yml',
    '**/Dockerfile*',
    '**/nginx*.conf',
    'prometheus.yml',

    # ÂâçÁ´ØUIÊñá‰ª∂ÔºàÂè™ÂÖ≥Ê≥®ÈÄªËæëÔºâ
    '**/*.wxml',
    '**/*.wxss',
    '**/*.css',
    '**/*.html',
    'miniprogram/images/**',
    'miniprogram/sitemap.json',
    'project.config.json',

    # ÊûÑÂª∫‰∫ßÁâ©ÂíåÁºìÂ≠ò
    '**/node_modules/**',
    '**/dist/**',
    '**/build/**',
    '**/coverage/**',
    '**/.nyc_output/**',
    '**/miniprogram_npm/**',

    # IDEÂíåÁâàÊú¨ÊéßÂà∂
    '**/.git/**',
    '**/.vscode/**',
    '**/.idea/**',
    '**/__pycache__/**',
    '**/.DS_Store',

    # ÂçïÂÖÉÊµãËØïÔºàÂ§™Â§öÁªÜËäÇÔºåÊàë‰ª¨Âè™Ë¶ÅÈõÜÊàêÊµãËØïÁ§∫‰æãÔºâ
    'bookworm-backend/src/tests/*.test.ts',  # ‰ΩÜP2‰ºöÁôΩÂêçÂçï‰∏Ä‰∫õ
    'bookworm-backend/src/tests/__mocks__/**',
    'bookworm-backend/vitest*.config.ts',
]

# ==============================================================================
# Ê†∏ÂøÉÈÄªËæë - ÁÆÄÊ¥ÅÁöÑÂàÜÂ±ÇÂà§Êñ≠
# ==============================================================================

def matches_any_pattern(file_path, patterns):
    """Ê£ÄÊü•Êñá‰ª∂Ë∑ØÂæÑÊòØÂê¶ÂåπÈÖç‰ªª‰ΩïglobÊ®°Âºè"""
    for pattern in patterns:
        if fnmatch.fnmatch(file_path, pattern):
            return True
    return False

def get_file_priority(rel_path):
    """
    ËøîÂõûÊñá‰ª∂‰ºòÂÖàÁ∫ß: 'P0', 'P1', 'P2', 'GARBAGE', None
    LinusÂºèËÆæËÆ°ÔºöÊ∂àÈô§Â§çÊùÇÁöÑif/elseÂµåÂ•óÔºåÁî®Ê∏ÖÊô∞ÁöÑÂ±ÇÊ¨°ÁªìÊûÑ

    ÂÖ≥ÈîÆÔºöÁôΩÂêçÂçï‰ºòÂÖà‰∫éÈªëÂêçÂçïÔºåÂÖÅËÆ∏Á≤æÈÄâÁöÑÊµãËØïÊñá‰ª∂Ë¶ÜÁõñÈÄöÁî®ÊéíÈô§ËßÑÂàô
    """
    # Á¨¨‰∏ÄÂ±ÇÔºöP0Ê†∏ÂøÉÊñá‰ª∂ÔºàÊúÄÈ´ò‰ºòÂÖàÁ∫ßÔºå‰∏çÂèØË¢´Ë¶ÜÁõñÔºâ
    if rel_path in P0_CRITICAL_FILES:
        return 'P0'
    if matches_any_pattern(rel_path, P0_CRITICAL_PATTERNS):
        return 'P0'

    # Á¨¨‰∫åÂ±ÇÔºöP1ÈáçË¶ÅÊñá‰ª∂
    if rel_path in P1_IMPORTANT_FILES:
        return 'P1'
    if matches_any_pattern(rel_path, P1_IMPORTANT_PATTERNS):
        return 'P1'

    # Á¨¨‰∏âÂ±ÇÔºöP2ÊñáÊ°£ÔºàÂåÖÊã¨Á≤æÈÄâÁöÑÈõÜÊàêÊµãËØïÔºåÁôΩÂêçÂçïË¶ÜÁõñÈªëÂêçÂçïÔºâ
    if matches_any_pattern(rel_path, P2_DOCUMENTATION):
        return 'P2'

    # Á¨¨ÂõõÂ±ÇÔºöÁªùÂØπÂûÉÂúæÔºåÊãíÁªù
    if matches_any_pattern(rel_path, ABSOLUTE_GARBAGE):
        return 'GARBAGE'

    # Á¨¨‰∫îÂ±ÇÔºö‰∏çÂú®‰ªª‰ΩïÁôΩÂêçÂçï‰∏≠ÔºåÊãíÁªùÔºàÁôΩÂêçÂçïÁ≠ñÁï•Ôºâ
    return None

def should_include_dir(dir_name):
    """Âø´ÈÄüËøáÊª§ÁõÆÂΩïÔºåÈÅøÂÖçÊ∑±ÂÖ•ÂûÉÂúæÁõÆÂΩï"""
    garbage_dirs = {
        'node_modules', '.git', 'dist', 'build', 'coverage',
        '.nyc_output', 'miniprogram_npm', '.vscode', '.idea',
        '__pycache__', 'migrations'  # ÊòéÁ°ÆÊéíÈô§migrations
    }
    return dir_name not in garbage_dirs

def collect_files_by_priority(project_root):
    """Êî∂ÈõÜÊâÄÊúâÊñá‰ª∂Âπ∂Êåâ‰ºòÂÖàÁ∫ßÂàÜÁ±ª"""
    files_by_priority = {'P0': [], 'P1': [], 'P2': []}

    for root, dirs, files in os.walk(project_root):
        # ËøáÊª§ÁõÆÂΩïÔºåÈÅøÂÖçËøõÂÖ•ÂûÉÂúæÁõÆÂΩï
        dirs[:] = [d for d in dirs if should_include_dir(d)]

        for file in files:
            file_path = os.path.join(root, file)

            # WindowsÂÖºÂÆπÊÄßÔºöË∑≥ËøáÁâπÊÆäËÆæÂ§áÂíåÊó†Ê≥ïÂ§ÑÁêÜÁöÑË∑ØÂæÑ
            try:
                rel_path = os.path.relpath(file_path, project_root).replace(os.sep, '/')
            except (ValueError, OSError):
                # Ë∑≥ËøáÁâπÊÆäËÆæÂ§áÊñá‰ª∂ÔºàÂ¶ÇWindowsÁöÑnulÔºâÂíåÊó†ÊïàË∑ØÂæÑ
                continue

            priority = get_file_priority(rel_path)
            if priority in files_by_priority:
                files_by_priority[priority].append(rel_path)

    # ÊéíÂ∫è‰ª•‰æøËæìÂá∫Á®≥ÂÆö
    for priority in files_by_priority:
        files_by_priority[priority].sort()

    return files_by_priority

def read_file_content(file_path):
    """Â∞ùËØïÂ§öÁßçÁºñÁ†ÅËØªÂèñÊñá‰ª∂"""
    encodings = ['utf-8', 'gbk', 'latin-1']
    for encoding in encodings:
        try:
            with open(file_path, 'r', encoding=encoding) as f:
                return f.read()
        except Exception:
            continue
    return f"[Error: Unable to decode file '{os.path.basename(file_path)}']"

def generate_review_file_v2(project_root):
    """ÁîüÊàêv2ÁâàÊú¨ÁöÑÂÆ°Êü•Êä•Âëä"""
    output_filename = 'bookworm_code_review_v2.txt'
    output_filepath = os.path.join(project_root, output_filename)

    # Êî∂ÈõÜÊñá‰ª∂Âπ∂ÂàÜÁ±ª
    files_by_priority = collect_files_by_priority(project_root)
    total_files = sum(len(files) for files in files_by_priority.values())

    with open(output_filepath, 'w', encoding='utf-8') as f:
        # Â§¥ÈÉ®‰ø°ÊÅØ
        f.write("=" * 80 + "\n")
        f.write("BOOKWORM PROJECT - CODE REVIEW v2 (HIGH SIGNAL-TO-NOISE RATIO)\n")
        f.write("=" * 80 + "\n")
        f.write(f"Generated on: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
        f.write(f"Strategy: Priority-based whitelist (P0 > P1 > P2)\n")
        f.write(f"Philosophy: Good Taste - Simple data structures lead to simple code\n\n")

        # ÁªüËÆ°‰ø°ÊÅØ
        f.write("### üìä FILE STATISTICS BY PRIORITY ###\n")
        f.write("-" * 80 + "\n")
        f.write(f"P0 (Critical - Core Business Logic):     {len(files_by_priority['P0']):3d} files\n")
        f.write(f"P1 (Important - System Context):         {len(files_by_priority['P1']):3d} files\n")
        f.write(f"P2 (Documentation - Examples & Tests):   {len(files_by_priority['P2']):3d} files\n")
        f.write(f"{'-' * 80}\n")
        f.write(f"Total files included:                     {total_files:3d} files\n\n")

        f.write("### üéØ DESIGN PRINCIPLES ###\n")
        f.write("-" * 80 + "\n")
        f.write("‚úì Whitelist strategy: Explicitly include what matters\n")
        f.write("‚úì Zero noise: No package-lock.json, no migrations, no build artifacts\n")
        f.write("‚úì Integration tests included: Executable documentation of API behavior\n")
        f.write("‚úì Priority-based: P0 (services/routes) ‚Üí P1 (plugins/jobs) ‚Üí P2 (docs/tests)\n\n")

        # Êñá‰ª∂ÂàóË°®ÔºàÊåâ‰ºòÂÖàÁ∫ßÂàÜÁªÑÔºâ
        f.write("### üìã INCLUDED FILES BY PRIORITY ###\n")
        f.write("-" * 80 + "\n")

        for priority in ['P0', 'P1', 'P2']:
            f.write(f"\n## {priority} Files ({len(files_by_priority[priority])}):\n")
            for rel_path in files_by_priority[priority]:
                f.write(f"  - {rel_path}\n")

        f.write("\n\n")

        # Ê∫ê‰ª£Á†ÅÂÜÖÂÆπÔºàÊåâ‰ºòÂÖàÁ∫ßÈ°∫Â∫èËæìÂá∫Ôºâ
        f.write("### üìÑ SOURCE CODE CONTENT ###\n")
        f.write("-" * 80 + "\n\n")

        for priority in ['P0', 'P1', 'P2']:
            if files_by_priority[priority]:
                f.write("=" * 80 + "\n")
                f.write(f"### {priority} PRIORITY FILES ###\n")
                f.write("=" * 80 + "\n\n")

                for rel_path in files_by_priority[priority]:
                    full_path = os.path.join(project_root, rel_path)
                    f.write("-" * 80 + f"\n### FILE: {rel_path}\n" + "-" * 80 + "\n\n")

                    if os.path.exists(full_path) and os.path.isfile(full_path):
                        content = read_file_content(full_path)
                        f.write(content.strip() + "\n\n\n")
                    else:
                        f.write(f"[FILE NOT FOUND]\n\n\n")

        # Â∞æÈÉ®
        f.write("=" * 80 + "\n")
        f.write("CODE REVIEW v2 GENERATION COMPLETE\n")
        f.write("=" * 80 + "\n")
        f.write("\nDesigned with 'Good Taste' - Linus Torvalds would approve.\n")

    return output_filepath, files_by_priority

def main():
    project_root = os.getcwd()
    print("=" * 80)
    print("BOOKWORM CODE REVIEW v2 - LINUS EDITION")
    print("=" * 80)
    print("\n[START] Generating high signal-to-noise ratio code review...\n")

    try:
        output_file, files_by_priority = generate_review_file_v2(project_root)
        file_size = os.path.getsize(output_file)
        size_str = f"{file_size / 1024:.1f} KB" if file_size > 1024 else f"{file_size} bytes"
        total_files = sum(len(files) for files in files_by_priority.values())

        print("[SUCCESS] Review generation successful!")
        print("-" * 80)
        print(f"Output file:    {os.path.basename(output_file)}")
        print(f"File size:      {size_str}")
        print(f"Total files:    {total_files}")
        print(f"  - P0 (Core):  {len(files_by_priority['P0'])} files")
        print(f"  - P1 (Ctx):   {len(files_by_priority['P1'])} files")
        print(f"  - P2 (Docs):  {len(files_by_priority['P2'])} files")
        print("-" * 80)
        print("\n[INFO] Excluded noise:")
        print("  - package-lock.json (auto-generated)")
        print("  - All database migrations (schema.prisma is enough)")
        print("  - Load test scripts (not core business logic)")
        print("  - One-time fix scripts (not architecture)")
        print("  - UI template files (.wxml/.wxss)")
        print("\n[INFO] Included value:")
        print("  + All services and routes (core business logic)")
        print("  + 5 key integration tests (executable API documentation)")
        print("  + Test infrastructure (understand how tests work)")
        print("  + Adapters and plugins (system architecture)")
        print("\n" + "=" * 80)
        print("REPORT READY FOR HIGH-LEVEL AI CONSUMPTION")
        print("=" * 80)

    except Exception as e:
        print(f"\n[ERROR] Failed to generate report: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
